<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Agile on raph haXx </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://raph.es/tags/agile/index.xml/</link>
    
    
    <copyright>Raphael Estrada 2011-2014</copyright>
    <updated>Tue, 24 Apr 2012 08:30:00 IST</updated>
    
    <item>
      <title>On being &#34;Senior&#34;</title>
      <link>http://raph.es/blog/2012/04/On-being-Senior/</link>
      <pubDate>Tue, 24 Apr 2012 08:30:00 IST</pubDate>
      
      <guid>http://raph.es/blog/2012/04/On-being-Senior/</guid>
      <description>

&lt;p&gt;When you get into the software industry, you notice how most companies make a big deal of whether you are &amp;ldquo;senior&amp;rdquo; or not. &amp;ldquo;Seniors&amp;rdquo; get to make more decisions, are more respected and get paid more. So everybody wants to be &amp;ldquo;senior&amp;rdquo;. But what does that mean?&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Junior&amp;rdquo; and &amp;ldquo;senior&amp;rdquo; are traditionally used to distinguish between &lt;a href=&#34;http://en.wikipedia.org/wiki/Suffix_%28name%29#Generational_titles&#34;&gt;generations&lt;/a&gt;. &amp;ldquo;Seniors&amp;rdquo; are older than &amp;ldquo;juniors&amp;rdquo;. That has been adapted to &lt;a href=&#34;http://en.wikipedia.org/wiki/Suffix_%28name%29#Academic&#34;&gt;academia&lt;/a&gt;, where again, the &amp;ldquo;seniors&amp;rdquo; have basically been studying a bit longer than &amp;ldquo;juniors&amp;rdquo;. It appears that just having been in one place a bit longer than somebody else buys you the privilege of being more &amp;ldquo;senior&amp;rdquo; than that person.&lt;/p&gt;

&lt;p&gt;I respectfully call bullshit. At least with regards to the usage of those terms in The Software Industry. The mere duration of having been in the industry is absolutely not a reliable indicator of &amp;ldquo;seniority&amp;rdquo; as most people mean it. Let&amp;rsquo;s move away from that ambiguous term, and say: &lt;em&gt;experience&lt;/em&gt;.&lt;/p&gt;

&lt;figure &gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;
        How many people perceive &amp;#39;seniority&amp;#39; in The Software Industry
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
    &lt;p&gt;&lt;a href=&#34;/img/blogger/senior_graph_bad.jpeg&#34;&gt;
  &lt;img src=&#34;/img/blogger/senior_graph_bad.jpeg&#34;  alt=&#34;People often assume linear relation between seniority and time&#34; width=&#34;500px&#34;  /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;/figure&gt;

&lt;div class=&#34;clearboth&#34;&gt;&lt;/div&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;What makes a so-called &amp;ldquo;senior&amp;rdquo;?&lt;/h1&gt;

&lt;p&gt;There has &lt;a href=&#34;http://www.diaryofaninja.com/blog/2012/03/27/irsquom-a-junior-developer-ndash-you-probably-are-too&#34;&gt;been&lt;/a&gt; &lt;a href=&#34;http://justinkan.com/what-good-is-experience&#34;&gt;some&lt;/a&gt; &lt;a href=&#34;http://ninjasandrobots.com/you-need-some-experience&#34;&gt;discussion&lt;/a&gt; about the value of experience in the blogosphere lately. They, too, seem to be thinking of experience as the time spent on something.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve done some interviews in my life now and I can wholeheartedly say that time itself does not tell you anything about somebody&amp;rsquo;s actual experience. There is a quote that I think fits nicely:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;An &lt;strong&gt;expert&lt;/strong&gt; is a person who has found out by his own &lt;strong&gt;painful&lt;/strong&gt; experience all the &lt;strong&gt;mistakes&lt;/strong&gt; that one can make in a very narrow field.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ndash; Niels Bohr&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note how this quote is about &lt;em&gt;experts&lt;/em&gt;. The word is clearly related to &amp;ldquo;experience&amp;rdquo;, but to complete the picture:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;A person with &lt;strong&gt;considerable experience&lt;/strong&gt; in a specific field can gain a reputation as an expert.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;a href=&#34;http://en.wikipedia.org/wiki/Experience&#34;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There you go. You gain experience by making mistakes, and making as many of them as possible. That makes you an expert. Expert is what most people should be saying when they talk about &amp;ldquo;seniors&amp;rdquo;. Because &amp;ldquo;senior&amp;rdquo; implies some form of age, whereas expert is what actually refers to somebody&amp;rsquo;s &lt;em&gt;&lt;code&gt;expert&lt;/code&gt;ise&lt;/em&gt; (there&amp;rsquo;s that word again!).&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;No pain, no gain&lt;/h1&gt;

&lt;p&gt;Yes, it usually takes time to make all those mistakes you need to become an expert. But more than time, it takes &lt;em&gt;pain&lt;/em&gt;. An expert will have spent a significant amount of time cursing and being frustrated about problems and tools, trying to make stuff work (and, hopefully, successfully doing so in the end). So while you &lt;em&gt;can&lt;/em&gt; safely assume that an expert will have spent time in the field, you unfortunately can&lt;em&gt;not&lt;/em&gt; do the reverse. Just spending time doing something will not necessarily make you an expert.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s also why it&amp;rsquo;s much harder and more valuable to give useful critical feedback on something than it is to compliment it. Anybody can point out obvious good things. Those who have made (less obvious) mistakes before will remember, and warn you about pitfalls they have encountered when they&amp;rsquo;ve been there, done that.&lt;/p&gt;

&lt;p&gt;Sadly, it&amp;rsquo;s also why many developers with little experience do not appreciate lots of advice that comes from so-called &amp;ldquo;seniors&amp;rdquo;. Because you cannot appreciate some things until you&amp;rsquo;ve been burnt yourself. I find that very evident when it comes to topics such as agile methodologies, test-driven development or even design patterns. If you haven&amp;rsquo;t felt the pain that these things can save you, you&amp;rsquo;ll probably not value them (yet).&lt;/p&gt;

&lt;p&gt;Joe Programmer&amp;rsquo;s CV saying &amp;ldquo;10 years writing performance-critical software in C++&amp;rdquo; looks more interesting to many readers than Jane Hacker&amp;rsquo;s CV which states &amp;ldquo;4 years developing websites with Python&amp;rdquo;. I&amp;rsquo;ve come to learn that both of these statements say equally &lt;em&gt;little&lt;/em&gt; about the applicant&amp;rsquo;s expertise. In fact, Jane could easily be more experienced (at whatever) because she might have been obsessively hacking away on twelve open-source projects in all her spare-time during those four years.&lt;/p&gt;

&lt;figure &gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;
        There&amp;#39;s more to &amp;#39;senior&amp;#39; than technical skills
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
    &lt;p&gt;&lt;a href=&#34;/img/blogger/senior_graph_bad2.jpeg&#34;&gt;
  &lt;img src=&#34;/img/blogger/senior_graph_bad2.jpeg&#34;  alt=&#34;People often assume linear relation between seniority and technical skill&#34; width=&#34;500px&#34;  /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;/figure&gt;

&lt;div class=&#34;clearboth&#34;&gt;&lt;/div&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Scalable experience&lt;/h1&gt;

&lt;p&gt;I was once hired as a &amp;ldquo;Senior Software Developer&amp;rdquo; at a company, and the Head of IT let me know what he expected from a &amp;ldquo;senior&amp;rdquo;. It was not just technical expertise, but just as much the ability to scale. To spread that expertise throughout the team. In fact, the word &amp;ldquo;senior&amp;rdquo; was yet again misleading here, &lt;em&gt;mentor&lt;/em&gt; would have been more appropriate.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Mentorship refers to a personal developmental relationship in which a &lt;strong&gt;more experienced&lt;/strong&gt; or more knowledgeable person &lt;strong&gt;helps to guide a less experienced&lt;/strong&gt; or less knowledgeable person.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;a href=&#34;http://en.wikipedia.org/wiki/Mentorship&#34;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When hiring an expert, the value is marginal if that person will sit in a corner with headphones on, going &amp;ldquo;Bring on the problems, I&amp;rsquo;ll hack them up!&amp;rdquo;. It can be useful to have that sort of maverick when you need a &lt;a href=&#34;http://www.galaktor.net/2011/10/scotty-effect.html&#34;&gt;miracle&lt;/a&gt; asap, but it&amp;rsquo;s rather useless most of the time.&lt;/p&gt;

&lt;p&gt;In a team, problems and solutions need to be explained and discussed. I&amp;rsquo;ve met people at that company who were great coders, but had big problems communicating. They&amp;rsquo;ve been on the project longer than me. They knew the codebase and tools better, too. Yet their official title did not say &amp;ldquo;senior&amp;rdquo;, and that was unlikely to change anytime soon. And rightfully so - their expertise was locked up inside their heads and did not scale.&lt;/p&gt;

&lt;figure &gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Better definition of &amp;#39;senior&amp;#39;. Note that there is lots of middle ground
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
    &lt;p&gt;&lt;a href=&#34;/img/blogger/senior_graph_2.jpeg&#34;&gt;
  &lt;img src=&#34;/img/blogger/senior_graph_2.jpeg&#34;  alt=&#34;Seniority is where tech and communicational skills meet&#34; width=&#34;500px&#34;  /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;/figure&gt;

&lt;div class=&#34;clearboth&#34;&gt;&lt;/div&gt;

&lt;p&gt;Aside from recruitment, many companies make this mistake in management, too. It seems that people who have joined the company earlier than others somehow get &lt;a href=&#34;http://www.urbandictionary.com/define.php?term=dibbs&#34;&gt;dibbs&lt;/a&gt; on the next leadership position that becomes available. Again, just because somebody is older or has been with the company longer, that by itself does not make them any more of an expert in&amp;hellip;&lt;em&gt;anything&lt;/em&gt; than somebody else who is younger and just joined six months ago.&lt;/p&gt;

&lt;p&gt;Furthermore, just because somebody can code well, it does not mean that they will make a good mentor or leader. Leadership involves much more than maintaining spreadsheets and going to meetings. I have seen many &amp;ldquo;team leaders&amp;rdquo; that, despite being decent programmers, lacked the most significant of attributes a &lt;em&gt;leader&lt;/em&gt; should have, i.e. a general sense of direction, ability to make decisions even (especially!) without having access to &lt;em&gt;all&lt;/em&gt; the information, and the ability to move a group of people into that direction. Preferably at the same time&amp;hellip;and without requiring a whip.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Programming and leadership abilities are two entirely orthogonal concerns.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;tl;dr&lt;/h1&gt;

&lt;p&gt;Think about what it is you mean when you say &amp;ldquo;senior&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Stop using the word &amp;ldquo;senior&amp;rdquo; when you actually mean &amp;ldquo;expert&amp;rdquo;. It takes the misleading implication of time out of the equation.&lt;/p&gt;

&lt;p&gt;Expert == lots of Experience
Experience != Age
Experience != Time on the project&lt;/p&gt;

&lt;p&gt;Experience == Mistakes over Time&lt;/p&gt;

&lt;p&gt;Anybody can tell you about the &amp;ldquo;good things&amp;rdquo; (they&amp;rsquo;re what&amp;rsquo;s printed on the box after all). An expert can tell you about the bad things that lurk beneath the surface - because she&amp;rsquo;s been there.&lt;/p&gt;

&lt;p&gt;Age or time on a project say nothing about expertise. Don&amp;rsquo;t hire or promote people primarily (or even partially) based on those criteria when what you actually want are &amp;ldquo;experts&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Expertise does not necessarily scale well.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Senior&amp;rdquo; developers/engineers/whatever have made tons of mistakes &lt;strong&gt;and&lt;/strong&gt; are able to help others learn from those mistakes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;: Added green triangular &amp;ldquo;senior zone&amp;rdquo; to last graph.
&lt;strong&gt;Edit&lt;/strong&gt;: Added second graph highlighting seniority vs. technical skills.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Update: This post has received some attention and comments over at &lt;a href=&#34;http://news.ycombinator.com/item?id=3883494&#34;&gt;Hacker News&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stop using the wrong tools</title>
      <link>http://raph.es/blog/2011/11/Stop-using-the-wrong-tools/</link>
      <pubDate>Thu, 10 Nov 2011 06:29:00 &#43;0100</pubDate>
      
      <guid>http://raph.es/blog/2011/11/Stop-using-the-wrong-tools/</guid>
      <description>

&lt;p&gt;When Apple gave us pure touchscreen interfaces, it was as if yet &lt;a href=&#34;http://screenrant.com/tech-terminator-iron-man-is-here-brusimm-7985/all/1/&#34;&gt;another&lt;/a&gt; science fiction dream came true. Apparently whenever we get a little bit closer to our sci-fi fantasies, we imagine the future will just take the same idea a bit further. &amp;ldquo;Look ma, no &lt;a href=&#34;http://www.ted.com/talks/john_underkoffler_drive_3d_data_with_a_gesture.html&#34;&gt;hands&lt;/a&gt;!&amp;rdquo; Awesome, no doubt. But the danger of small increments is that it feels like progress, even though you could be heading in the wrong direction.&lt;/p&gt;

&lt;p&gt;Having robot monkey butlers go skynet on mankind makes great fiction. But could our pursuit of Asimov&amp;rsquo;s smart robots really be distracting us from other, entirely different solutions to our monkey butler needs? Like genetically enhanced apes? Sci-fi inspires authors inspire engineers inspire sci-fi. That chain of inspiration has undoubtedly led to some impressive technological &lt;a href=&#34;http://www.youtube.com/watch?v=Bmglbk_Op64&#34;&gt;innovation&lt;/a&gt;. At which point, though, could recycling century-old inspiration from fiction become a bad thing? When should we dismiss them as bad ideas to instead focus our efforts on alternatives?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m drifting a bit here. The other day I read Bret Victor&amp;rsquo;s &lt;a href=&#34;http://worrydream.com/ABriefRantOnTheFutureOfInteractionDesign/&#34;&gt;opinion&lt;/a&gt; on a very common vision of how we might interact with technology in the future. He argues that when envisioning the designs of the future, people make small increments to present technology and while doing so, tend to forget about what really makes a tool great.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;That is, a tool converts what we can &lt;em&gt;do&lt;/em&gt; into what we &lt;em&gt;want to do&lt;/em&gt;. A great tool is designed to fit &lt;strong&gt;both&lt;/strong&gt; sides.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The touchscreens in modern devices might be closer to what we expect from futuristic high-tech devices. But just because they let us use a mobile web browser more efficiently, does that mean the future will be all chrome and touchscreens?&lt;/p&gt;

&lt;figure &gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Everything is chrome in the future!
        &lt;br/&gt;src:&lt;a href=&#34;http://www.unitedspongebob.com/&#34;&gt; 
            Nickelodeon
        &lt;/a&gt; 
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
    &lt;p&gt;&lt;a href=&#34;/img/blogger/chrome.jpeg&#34;&gt;
  &lt;img src=&#34;/img/blogger/chrome.jpeg&#34;  alt=&#34;Squidward dreams of a future where everything is literally chrome&#34; width=&#34;300em&#34;  /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;/figure&gt;

&lt;div class=&#34;clearboth&#34;&gt;&lt;/div&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Usability is hard&lt;/h1&gt;

&lt;p&gt;I don&amp;rsquo;t know what the future will bring. What I do know is that people are generally not very good at picking the right tools. And I see no reason why that could not also apply in the future. Revisiting the above definition, there are two things that can go wrong: 1) a tool fails to do &amp;ldquo;what we want to do&amp;rdquo;, or 2) that &amp;ldquo;what we can[not] do&amp;rdquo; prevents us from using the tool properly (or use it at all).&lt;/p&gt;

&lt;p&gt;The first one seems obvious. I need to drive a nail into a wall, so I use a hammer, not a wrench. But it&amp;rsquo;s not always that obvious, and we often end up using tools for things they were never intended to do. That&amp;rsquo;s cool if you&amp;rsquo;re aware of the problem and know what you are doing - MacGyver! - but just as foolish otherwise.&lt;/p&gt;

&lt;p&gt;The other type of tool abuse is more subtle: failing to bridge the tool&amp;rsquo;s abilities with those of it&amp;rsquo;s user. Buzz word: &lt;em&gt;usability&lt;/em&gt;. Creating a tool that can do something is the easy part - making it so that people can, will, and repeatedly use it is much harder. Simply put: the most effective tool is not really a tool if nobody uses it.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Examples I&amp;rsquo;d like to rant about&lt;/h1&gt;

&lt;p&gt;As a software engineer, I happen to see wrong-tool-syndrom a lot in - wait for it - software development. There are a few examples in particular that I have noticed recently and I would like to put them here for two reasons. To make my point (duh) and to rant.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Email chain discussions&lt;/h2&gt;

&lt;p&gt;The 80&amp;rsquo;s called, they want their mailing lists back! I totally and absolutely &lt;em&gt;despise&lt;/em&gt; mailing lists. Whenever I need to go to one for help with a tool, I do my best to ditch the tool. They used to have their purpose, nowadays they&amp;rsquo;re just obsolete usability nightmares.&lt;/p&gt;

&lt;p&gt;Email is simply the wrong tool for multi-user, text-based conversations. It gets worse with corporate email. It&amp;rsquo;s a nightmare to keep people on/off the receipient list; people get spammed. It&amp;rsquo;s insanely redundant - having to resend the entire past correspondence at the bottom of each message. And once someone hits &amp;ldquo;Reply&amp;rdquo; instead of &amp;ldquo;Reply All&amp;rdquo;, then the discussion gets fragmented and redundancy even increases.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&#34;http://xmpp.org/extensions/xep-0045.html&#34;&gt;much&lt;/a&gt; &lt;a href=&#34;http://trac-hacks.org/wiki/DiscussionPlugin&#34;&gt;better&lt;/a&gt; &lt;a href=&#34;http://www.coordino.com/&#34;&gt;tools&lt;/a&gt; available for online discussions. They were designed to allow for sane reading, backtracking, quoting and searching. And above all, they&amp;rsquo;re much less redundant than when using email.&lt;/p&gt;

&lt;figure &gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Mailing lists are sooo 80&amp;#39;s. And, unlike this here boombox, they *suck*.
        &lt;br/&gt;src:&lt;a href=&#34;http://www.wikipedia.org&#34;&gt; 
            Wikipedia
        &lt;/a&gt; 
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
    &lt;p&gt;&lt;a href=&#34;/img/blogger/boombox.jpeg&#34;&gt;
  &lt;img src=&#34;/img/blogger/boombox.jpeg&#34;  alt=&#34;A classic, cool cassette player from the eighties&#34; width=&#34;400em&#34;  /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;/figure&gt;

&lt;div class=&#34;clearboth&#34;&gt;&lt;/div&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Avoiding OOP features in OOP languages&lt;/h2&gt;

&lt;p&gt;Modern programming languages have some comfortable features, like just-in-time compilation, sandboxing or garbage collection. Take the .NET runtime. With C# as it&amp;rsquo;s &amp;ldquo;native&amp;rdquo; language, it supports polymorphism, i.e. virtual methods.&lt;/p&gt;

&lt;p&gt;I have seen people spend significant amounts of time &amp;ldquo;optimizing&amp;rdquo; their code to prevent the runtime from having to look for the right method to call in the inheritance chain. They end up with lots of &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/88c54tsw%28v=VS.100%29.aspx&#34;&gt;sealed&lt;/a&gt; classes which tell the compiler that no other classes may be derived from them. Consequently, the runtime will not need to check for overrides at execution time, thus making the code a few friggaseconds faster. Neat, huh?&lt;/p&gt;

&lt;p&gt;Not. My problem with this is not &lt;em&gt;that&lt;/em&gt; the classes are sealed (even though unit testing them can be a bitch). It is &lt;em&gt;why&lt;/em&gt; they are sealed. It&amp;rsquo;s not the result of some object-oriented design decision. It&amp;rsquo;s done with the sole purpose to prevent the CLR from doing something it was &lt;em&gt;designed&lt;/em&gt; to do. C# is object-oriented, so there are virtual methods - deal with it. If you are afraid of the cost, then C# is the wrong tool for your problem - maybe have a look at C/C++ instead.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Static methods in OOP languages&lt;/h2&gt;

&lt;p&gt;Within the last 10 years, many programmers have migrated from C++ to C#. I can recognize their (early) code right away: static methods everywhere. That is not object oriented. It&amp;rsquo;s method oriented - &lt;em&gt;procedural&lt;/em&gt;. There are only very few cases that justify the use of static methods in OOP. You are either using C# for the wrong reasons or you don&amp;rsquo;t understand OOP. Either way, you will not be able to use the tool the way it was designed to be used.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Videos in (tech) blogs&lt;/h2&gt;

&lt;p&gt;When I go to your blog, I want to read it - not watch a stupid video. Chances are my mobile browser does not know your codec, and if it does, it still looks like crap. And do you really expect me to turn down my music in order to listen to you say stuff you were too lazy to write down? There&amp;rsquo;s so many things that make videos bad for this: I can&amp;rsquo;t skim over the content like I usually do - instead I end up jumping around in the timeline, buffering, cursing. Fuck your &lt;a href=&#34;http://de.wikipedia.org/wiki/Vlog&#34;&gt;vlog&lt;/a&gt; or whatever you call it, do a podcast if that&amp;rsquo;s your thing. If you have a blog, I want to &lt;em&gt;read&lt;/em&gt; it. Period.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Perforce for version control&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;Perforce&amp;rdquo; and &amp;ldquo;control&amp;rdquo; is an contradiction. There you go. I just had to put this one in.&lt;/p&gt;

&lt;figure &gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Me when I see your vlog
        &lt;br/&gt;src:&lt;a href=&#34;http://www.thestupiditburns.com&#34;&gt; 
            thestupiditburns.com
        &lt;/a&gt; 
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
    &lt;p&gt;&lt;a href=&#34;/img/blogger/thestupiditburns.jpeg&#34;&gt;
  &lt;img src=&#34;/img/blogger/thestupiditburns.jpeg&#34;  alt=&#34;when something is so stupid that makes your head hurt&#34; width=&#34;450em&#34;  /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;/figure&gt;

&lt;div class=&#34;clearboth&#34;&gt;&lt;/div&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;The thin line between a pragmatist and a moron&lt;/h1&gt;

&lt;p&gt;Now, you cannot always switch tools. Switching language on a gazillion LOC project is not going to happen overnight. Then, at least try to use the tools you have the way the were designed to be used. Make the most of what you have, and don&amp;rsquo;t try to bastardize it just because you are too lazy to use it the right way.&lt;/p&gt;

&lt;p&gt;What I really hate is that engineers that abuse a tool beyond recognition are often admired. Yes, it&amp;rsquo;s great to be able to improvise when required - but it&amp;rsquo;s far more important to be able to &lt;a href=&#34;http://www.engineyard.com/blog/2011/the-number-one-trait-of-a-great-developer/&#34;&gt;decide&lt;/a&gt; what the right tool for the job/situation/user is. A construction worker that uses a screwdriver to punch holes into walls instead of using a drill will not be considered creative, but a moron. Why do the opposite in software?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Scotty Effect</title>
      <link>http://raph.es/blog/2011/10/The-Scotty-Effect/</link>
      <pubDate>Thu, 27 Oct 2011 10:33:00 IST</pubDate>
      
      <guid>http://raph.es/blog/2011/10/The-Scotty-Effect/</guid>
      <description>

&lt;p&gt;There&amp;rsquo;s a common problem among software engineers. Whenever someone asks us for an estimation on how long task X is going to take, it happens. &amp;ldquo;Ah, not a big deal, half a day, max.&amp;rdquo; Is what we initially want to say. It happens to most people I know, and it happens to me.&lt;/p&gt;

&lt;p&gt;It seems like there&amp;rsquo;s a little geek inside us that wants to impress our customers by making it look like we&amp;rsquo;re wizards. Somebody is asking you to do something, and obviously it&amp;rsquo;s a problem complex enough that an engineer has to do it, now.&lt;/p&gt;

&lt;p&gt;And it&amp;rsquo;s all because of &lt;a href=&#34;http://www.startrek.com/database_article/scott&#34;&gt;Montgomery Scott&lt;/a&gt;, aka &amp;ldquo;Scotty&amp;rdquo; from the Original Star Trek ensemble. Whenever Kirk asks Scotty to fix something, it goes somewhere along these lines:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Kirk&lt;/strong&gt;: &amp;ldquo;Scotty, can you get the warp drive online in 2 hours?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scotty&lt;/strong&gt;: &amp;ldquo;Lol captain, that&amp;rsquo;s impossible. Do you have any idea how complex and fragile a matter/anti-matter propulsion engine is?? We&amp;rsquo;ll have to&amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kirk&lt;/strong&gt;: &amp;ldquo;Scotty, it&amp;rsquo;s crucial that we prevent the universe from imploding so I can get into this alien chick&amp;rsquo;s pants.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scotty&lt;/strong&gt;: &amp;ldquo;Meh, I&amp;rsquo;ll see what I can do&amp;hellip;&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No surprises so far - just a normal day in the life of an engineer having to deal with unrealistic expectations, right? Wrong! In the end, Scotty pulls it off! He not only fixes it, but apparently the warp engine hasn&amp;rsquo;t went supernova in the next episode, either. So he probably did a good job, too!&lt;/p&gt;

&lt;p&gt;We grew up with this idea, that if you really want your boss to get into that alien chick&amp;rsquo;s pants, you need to be a wizard. You get the point. That&amp;rsquo;s why I believe it&amp;rsquo;s Scotty&amp;rsquo;s fault. Don&amp;rsquo;t get me wrong, Scotty rocks (rest in peace, Mr. Doohan). But that inner geek inside us, it&amp;rsquo;s probably a little Scotty.&lt;/p&gt;

&lt;figure &gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;
        I couldn&amp;#39;t find DuctTape or WD40 on GitHub
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
    &lt;p&gt;&lt;a href=&#34;/img/blogger/repairs.jpeg&#34;&gt;
  &lt;img src=&#34;/img/blogger/repairs.jpeg&#34;  alt=&#34;duct tape and wd40 can fix anything&#34; width=&#34;400em&#34;  /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;/figure&gt;

&lt;div class=&#34;clearboth&#34;&gt;&lt;/div&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Back to reality&lt;/h1&gt;

&lt;p&gt;Spoiler alert! Star Trek is just a TV show. In the real world, it&amp;rsquo;s not going to happen. And this is why.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;It&amp;rsquo;s not the same thing&lt;/h2&gt;

&lt;p&gt;If you do a 10 day job in just 1 day, then you&amp;rsquo;re not doing the 10 day job. Claiming otherwise is lying to yourself and your customer. You&amp;rsquo;re really doing the ugly 1 day version, involving lots of duct tape and WD-40. We like to call ourselves &amp;ldquo;hackers&amp;rdquo; - just like the good, old-school hacker. But people forget that a &amp;ldquo;hack&amp;rdquo; back in the good old days was nothing bad or malicious. It was something neat, elegant. It was &amp;ldquo;the right thing to do&amp;rdquo;. Read Steven Levy&amp;rsquo;s &lt;a href=&#34;http://books.google.com/books?id=mShXzzKtpmEC&amp;amp;lpg=PA67&amp;amp;vq=right%20thing%20to%20do&amp;amp;pg=PA58#v=onepage&amp;amp;q&amp;amp;f=false&#34;&gt;Hackers&lt;/a&gt;. If you&amp;rsquo;re hotshot enough to pull off the 10 day job in 1 day, fair enough. It&amp;rsquo;s most likely though, even though you might be awesome, that you are &lt;a href=&#34;http://www.livingwithsourcecode.com/2011/03/ill-just.html&#34;&gt;just&lt;/a&gt; taking shortcuts.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Sooner or later, it will come back to bite you&lt;/h2&gt;

&lt;p&gt;This can work in emergency scenarios, and over short periods of time. But by doing so, you&amp;rsquo;ll build up more and more &lt;a href=&#34;http://en.wikipedia.org/wiki/Technical_debt&#34;&gt;technical debt&lt;/a&gt;. We all know what happens if you run a never-ending tab without bothering to repay your debt. One day, your warp engine will not work in the next episode. You might eventually have to eject it.&lt;/p&gt;

&lt;p&gt;Also, be aware that making it look like you can make the impossible happen will raise your customers&amp;rsquo; expectations - putting you under pressure to uphold the illusion.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Life&amp;rsquo;s not a TV show&lt;/h2&gt;

&lt;p&gt;Scotty is usually pessimistic at first, but then finds some magical way to do it within the impossible time frame. In reality, things are the other way around. They seem simple, but when you take a closer look, they turn out to be more complicated. Knowing this makes the difference between guessing and estimating.&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;What to do about it&lt;/h1&gt;

&lt;p&gt;You&amp;rsquo;re better off to resist that initial urge to fix the warp drive/deflector shield/&lt;insert bug here&gt; in &amp;ldquo;2 days&amp;rdquo; (or whatever ambitious answer your gut gives you). Take one of the many great pieces of advice from &lt;a href=&#34;http://books.google.com/books?id=5wBQEp6ruIAC&amp;amp;lpg=PP1&amp;amp;dq=the%20pragmatic%20programmer&amp;amp;pg=PT87#v=onepage&amp;amp;q&amp;amp;f=false&#34;&gt;The Pragmatic Programmer&lt;/a&gt;, and just say &amp;ldquo;I&amp;rsquo;ll get back to you&amp;rdquo;. Do some realistic estimating (not guessing!), and then tell them how long it will take.&lt;/p&gt;

&lt;p&gt;And guess what, you&amp;rsquo;ll get better with your estimations. You&amp;rsquo;ll end up doing things the right way, and within realistic time.&lt;/p&gt;

&lt;p&gt;And every once in a while, they&amp;rsquo;ll still think what you do is magic.&lt;/p&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;UPDATE:&lt;/h1&gt;

&lt;p&gt;My fellow trekkers have not dissapointed and spotted what can appear to be a contradiction to my descriptions of Scotty (which are based on the &amp;ldquo;old&amp;rdquo; series): in the great espisode 130 of &amp;ldquo;Star Trek: The Next Generation&amp;rdquo;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Relics_%28Star_Trek:_The_Next_Generation%29&#34;&gt;&amp;ldquo;Relics&amp;rdquo;&lt;/a&gt;, Scotty returns to the latest USS Enterprise D. He then hints at his successor, Chief Engineer Geordi LaForge, that Geordi should always exaggerate his estimations to make himself look like a miracle worker (&lt;a href=&#34;http://www.imdb.com/title/tt0708764/quotes?qt=qt0349432&#34;&gt;quote&lt;/a&gt;). Since I&amp;rsquo;m claiming that Scotty always managed to do miracles in an impossible time frame, it looks like Scotty did not only deceive Kirk, but me as well. Or did he? While thinking about a response to this, I find that I am torn. I have two separate responses, each from a different perspective. Yet none of them affect the point of this post.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;I, Hacker&lt;/h2&gt;

&lt;p&gt;Senior engineers often tweak their previous achievements to look good in front of the n00bs by giving advice that they not necessarily have never adhered to themselves. But who&amp;rsquo;s going to prove the opposite? In this episode, being in the 24th century with all the shiny strange technology, Scott feels outdated and useless. This could just be a senior engineer trying to say something smart to impress his younger, more advanced successor.&lt;/p&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;I, Trekker&lt;/h2&gt;

&lt;p&gt;This espisode was produced 23 years after The Original Series, approx. 1 year after Gene Rodenberry&amp;rsquo;s passing. Star Trek is full of inconsistencies. It&amp;rsquo;s hard to keep continuity perfect over so many episodes and movies, and it&amp;rsquo;s Sci-Fi after all. I seriously believe this was something the authors wanted Scotty to say in order to be funny, nothing more and nothing less. It is funny because it&amp;rsquo;s a direct contradiction to what we all know from previous events. This was a great espisode, and this scene in particular was a memorable one - but I refuse to acknowledge this as evidence that Scotty wasn&amp;rsquo;t simply an extraordinary engineer - a wizard.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;This post received some attention over at Hacker News - check out the &lt;a href=&#34;http://news.ycombinator.com/item?id=3162415&#34;&gt;discussions&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>just do it</title>
      <link>http://raph.es/blog/2011/02/just-do-it/</link>
      <pubDate>Mon, 14 Feb 2011 21:08:00 &#43;0100</pubDate>
      
      <guid>http://raph.es/blog/2011/02/just-do-it/</guid>
      <description>&lt;p&gt;Blogs have become really popular several years ago. Now that the hype is over it should be safe for me to create one without risking to be considered surfing on the hype wave. (Note to self for 2015: Have a look at that Twitter-thingy.) But where do I begin? Many topics have been building up in my head, and I often have thought to myself &amp;ldquo;this would make a neat blog post&amp;rdquo;. Getting something started can be tough, a phenomenon known to have killed many aspiring (not only) software projects before they even began.&lt;/p&gt;

&lt;p&gt;Starting a new project is not so different from me creating this new blog. You are full of ideas, have a pretty good picture of what you want the result to be like, but wonder where to set that very first step to get there. It can be very tempting and alot of  fun to research, plan an design for a young and innocent project. It is like a greenfield wonderland where we can dream up anything we would like to do. Go for it. Go nuts. But only a little.  Otherwise you will find yourself trapped inside the infamous &lt;a href=&#34;http://www.joeydevilla.com/2007/11/20/the-procrastination-flowchart/&#34;&gt;procrastination loop&lt;/a&gt; instead of getting any real work done. Timeboxing your preparations can help.&lt;/p&gt;

&lt;figure &gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;
        procrastination loop
        &lt;br/&gt;src:&lt;a href=&#34;http://www.joeydevilla.com/&#34;&gt; 
            Joey deVilla
        &lt;/a&gt; 
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
    &lt;p&gt;&lt;a href=&#34;/img/blogger/procrast.jpeg&#34;&gt;
  &lt;img src=&#34;/img/blogger/procrast.jpeg&#34;   width=&#34;400em&#34;  /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;/figure&gt;

&lt;div class=&#34;clearboth&#34;&gt;&lt;/div&gt;

&lt;p&gt;Just do it - this catchy and slightly dingy slogan is something people probably should keep in mind when starting something. To avoid what is known as &amp;ldquo;startup fatigue&amp;rdquo; it is important that you stop talking about something and actually start doing it. You will soon find that many things you were dreaming of turn out to be more complicated or even entirely different than you thought they would be. And - assuming that there is a customer somewhere upstream - it gets even worse: all &lt;a href=&#34;http://www.imdb.com/title/tt0468569/quotes?qt0499831&#34;&gt;your beautiful little plans will be shattered&lt;/a&gt; by changing requirements. It is important to discover these real problems early. You can fix things while you go.&lt;/p&gt;

&lt;p&gt;This is what I am now doing with this blog. I am churning out a first post. That makes it far more valuable to you than the mere idea of a blog. You can actually use it, read it. My English might not be perfect, and my plans for this blog are not very detailed. Maybe it&amp;rsquo;s slightly confusing, badly structured or full of typos. But bear with me. You might not like it now, but I hope to get feedback from you so I can make it better. I will tackle challenges as they come up instead of trying to predict all possible issues that might arise. And who knows, maybe some of you will find one or two useful things in it, too. If there ae no readers and thus no feedback, then at least I did not waste too much time polishing it for a null-audience.&lt;/p&gt;

&lt;p&gt;At this point you might think this sounds like a logical and reasonable way to approach a task. That&amp;rsquo;s because it is. And I am surely not the first one to point that out. Some call it common sense. Others call it &lt;a href=&#34;http://www.pragprog.com/the-pragmatic-programmer&#34;&gt;pragmatic&lt;/a&gt;. Again others call it &lt;a href=&#34;http://agilemanifesto.org/&#34;&gt;agile&lt;/a&gt;. Brand it what you like, it is just my preferred way of approaching a problem. Not  only for blogs, but also in software. That just happens to be what I do for a living. So that is what I intend to write about here. Smart &amp;amp; lazy ways of solving problems. Stuff I come accross, think about, like or dislike. This was the first step, and the subsequent ones will be much easier now that I actually got started.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>