<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Dotnet on raph haXx </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://raph.es/tags/dotnet/index.xml/</link>
    
    
    <copyright>Raphael Estrada 2011-2014</copyright>
    <updated>Tue, 02 Oct 2012 16:47:00 IST</updated>
    
    <item>
      <title>autofHACK - forcing activation of a service and dynamic resolution of it&#39;s dependencies</title>
      <link>http://raph.es/blog/2012/10/autofHACK---forcing-activation-of-a-service-and-dynamic-resolution-of-its-dependencies/</link>
      <pubDate>Tue, 02 Oct 2012 16:47:00 IST</pubDate>
      
      <guid>http://raph.es/blog/2012/10/autofHACK---forcing-activation-of-a-service-and-dynamic-resolution-of-its-dependencies/</guid>
      <description>&lt;p&gt;Sorry, I just couldn&amp;rsquo;t resist the &amp;ldquo;autofHack&amp;rdquo; pun.&lt;/p&gt;

&lt;p&gt;In case you don&amp;rsquo;t know &lt;a href=&#34;http://code.google.com/p/autofac/&#34;&gt;Autofac&lt;/a&gt;, this post won&amp;rsquo;t make much sense to you. Go read about it NOW. In the meantime us cool kids will play without you.&lt;/p&gt;

&lt;p&gt;Autofac can find the right constructor on your service and resolve it&amp;rsquo;s dependencies automagically using reflection when you do so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;builder.RegisterType&amp;lt;MyClass&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can give it a precreated instance directly like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var m = new MyClass();
builder.RegisterInstance(m);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first is lazy and will only activate your service if somebody actually depends on it.&lt;/p&gt;

&lt;p&gt;The latter can come in handy if you want to make sure that the service is actually instantiated and running, no matter if others depend on it or not.&lt;/p&gt;

&lt;p&gt;The problem with &lt;code&gt;RegisterInstance()&lt;/code&gt; is that there is no way for you to resolve the constructor dependencies through the IoC container.&lt;/p&gt;

&lt;p&gt;What you can do is implement the &lt;a href=&#34;http://code.google.com/p/autofac/wiki/Startable&#34;&gt;&lt;code&gt;IStartable&lt;/code&gt;&lt;/a&gt; interface, and it&amp;rsquo;s method &lt;code&gt;Start()&lt;/code&gt; will be called by the container once it&amp;rsquo;s configured.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MyClass: IStartable
{
    public void Start()
    {
        // do stuff
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s not nice for two reasons: first, it forces me to use &lt;code&gt;Start()&lt;/code&gt;, which can seem a bit forced in a model that has no need for that. Second, it requires your model to reference the Autofac library in order to use the interface, and I really don&amp;rsquo;t want my whole system to be aware of the IoC framework - it should glue them together without them knowing how it happens, and referencing the library goes against that idea.&lt;/p&gt;

&lt;p&gt;So I wrote up a few extension methods to hide the IStartable interface and integrate it into the Autofac syntax.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;builder.RegisterAndActivate&amp;lt;MyClass&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will register the type as when using &lt;code&gt;RegisterType&amp;lt;T&amp;gt;&lt;/code&gt;, but also register a bootstrapper service which in it&amp;rsquo;s &lt;code&gt;Start()&lt;/code&gt; method will resolve your service once, hence bringing it to life even if nobody else actively requests it.&lt;/p&gt;

&lt;p&gt;The code is here:
&lt;a href=&#34;https://github.com/galaktor/autofac-extensions&#34;&gt;https://github.com/galaktor/autofac-extensions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep in mind (as stated on the autofac page about &lt;code&gt;IStartable&lt;/code&gt;) that this only makes sense when you&amp;rsquo;re service has a &lt;em&gt;Singleton&lt;/em&gt; lifetime (because otherwise you&amp;rsquo;ll only have activated one lonely instance that will die shortly after).&lt;/p&gt;

&lt;p&gt;I suggested this be included in the official Autofac code in this issue:
&lt;a href=&#34;http://code.google.com/p/autofac/issues/detail?id=388&#34;&gt;http://code.google.com/p/autofac/issues/detail?id=388&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Leaving the Comfort Zone</title>
      <link>http://raph.es/blog/2012/09/Leaving-the-Comfort-Zone/</link>
      <pubDate>Sun, 16 Sep 2012 19:43:00 IST</pubDate>
      
      <guid>http://raph.es/blog/2012/09/Leaving-the-Comfort-Zone/</guid>
      <description>

&lt;p&gt;Yeah, what a &amp;ldquo;blah&amp;rdquo; title. But I&amp;rsquo;m in a hurry now. As all the internets have undoubtedly noticed, I haven&amp;rsquo;t blogged in a while. I&amp;rsquo;ve been busy with shit, and to break out of it I&amp;rsquo;m dumping out a quick post. In fact, future posts will probably be a bit shorter, just to get anything out.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;What&amp;rsquo;s been happening&lt;/h1&gt;

&lt;p&gt;One of my more recent &lt;a href=&#34;http://www.galaktor.net/2012/02/yet-another-attempt-at-levelling-up-my.html&#34;&gt;posts&lt;/a&gt; (read: months old) mentioned that I was once again attempting to move my computing life into Linux. Well, the good news is, I succeeded. I&amp;rsquo;ve spent about 98% (pretty random gut-feeling number) of my time on Crunchbang in the past months, and there&amp;rsquo;s no looking back so far.&lt;/p&gt;

&lt;p&gt;I wish I could blame my laziness with regards to blogging on a missing driver for The Internet or something. But really I&amp;rsquo;ve seen only a minor driver issue with my built-in webcam&amp;rsquo;s mic, which I have also resolved - so Linux has been working great on my laptop. Yet I&amp;rsquo;ve always been a Windows guy, and switching to Linux had one big challenge in particular: coding.&lt;/p&gt;

&lt;p&gt;I had to make pretty serious changes to my usual workflow to get coding on Linux. I wanted to leave the MS world I am used to behind and go as native as possible, Which was pretty much the definition of what all those &amp;ldquo;leave your comfort zone&amp;rdquo; mantras are about.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Going hardcore&lt;/h1&gt;

&lt;p&gt;Determined to embrace the command-line world which is Linux, I decided to go the whole length and use Emacs as my (sort of) IDE. And the learning curve was a lot easier than I expected - you hear a lot of bullshit about how hard it is and whatever. It wasn&amp;rsquo;t. Yes, you need to learn some shortcuts, big deal. It&amp;rsquo;s just a powerful text editor with a bunch of plugins. From day one I&amp;rsquo;ve been running it in console mode (-nw), and it not only looks like straight out of a cliche hacker movie, it&amp;rsquo;s also really lightweight and fast. Loving it.&lt;/p&gt;

&lt;p&gt;Language was trickier - I&amp;rsquo;m mainly a .NET guy, and I have played with Mono before, but I again wanted to go as &amp;ldquo;non-Windows&amp;rdquo; as possible. And I wanted to use the opportunity to learn new languages. So I played around with clojure for a while - and I might write a bit on it separately, but long story short: I&amp;rsquo;m not impressed. It&amp;rsquo;s essentially yet another abstraction above of where I&amp;rsquo;ve spent the last years (C#, which is Java-ish). But contrary to common opinion, I don&amp;rsquo;t think imperative programming is necessarily evil, and I&amp;rsquo;ve found myself leaning toward the more low-level side of things again.&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Coding in Go&lt;/h1&gt;

&lt;p&gt;To cut to the chase, I discovered Go, which is like C on steroids, and it immediately felt like what I need. I&amp;rsquo;ve gone from zero to productive in a few days, and I&amp;rsquo;m pretty happy so far. Again, I&amp;rsquo;ll be posting on this later. I have a little side-project going which I will write about on this here blog soon.&lt;/p&gt;

&lt;p&gt;To summarize: I barely use Windows at all, just for the occasional game, so very rarely .I feel at home on Linux now, and I&amp;rsquo;m coding happily in Go on Emacs with some help of Go&amp;rsquo;s great command line tools. I&amp;rsquo;d say this attempt at moving to Linux was finally a success, and I&amp;rsquo;ve not only left my comfort zone, I pretty much inverted it - and it&amp;rsquo;s been a great ride so far.&lt;/p&gt;

&lt;p&gt;hugs and kisses xoxox
lol&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stop using the wrong tools</title>
      <link>http://raph.es/blog/2011/11/Stop-using-the-wrong-tools/</link>
      <pubDate>Thu, 10 Nov 2011 06:29:00 &#43;0100</pubDate>
      
      <guid>http://raph.es/blog/2011/11/Stop-using-the-wrong-tools/</guid>
      <description>

&lt;p&gt;When Apple gave us pure touchscreen interfaces, it was as if yet &lt;a href=&#34;http://screenrant.com/tech-terminator-iron-man-is-here-brusimm-7985/all/1/&#34;&gt;another&lt;/a&gt; science fiction dream came true. Apparently whenever we get a little bit closer to our sci-fi fantasies, we imagine the future will just take the same idea a bit further. &amp;ldquo;Look ma, no &lt;a href=&#34;http://www.ted.com/talks/john_underkoffler_drive_3d_data_with_a_gesture.html&#34;&gt;hands&lt;/a&gt;!&amp;rdquo; Awesome, no doubt. But the danger of small increments is that it feels like progress, even though you could be heading in the wrong direction.&lt;/p&gt;

&lt;p&gt;Having robot monkey butlers go skynet on mankind makes great fiction. But could our pursuit of Asimov&amp;rsquo;s smart robots really be distracting us from other, entirely different solutions to our monkey butler needs? Like genetically enhanced apes? Sci-fi inspires authors inspire engineers inspire sci-fi. That chain of inspiration has undoubtedly led to some impressive technological &lt;a href=&#34;http://www.youtube.com/watch?v=Bmglbk_Op64&#34;&gt;innovation&lt;/a&gt;. At which point, though, could recycling century-old inspiration from fiction become a bad thing? When should we dismiss them as bad ideas to instead focus our efforts on alternatives?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m drifting a bit here. The other day I read Bret Victor&amp;rsquo;s &lt;a href=&#34;http://worrydream.com/ABriefRantOnTheFutureOfInteractionDesign/&#34;&gt;opinion&lt;/a&gt; on a very common vision of how we might interact with technology in the future. He argues that when envisioning the designs of the future, people make small increments to present technology and while doing so, tend to forget about what really makes a tool great.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;That is, a tool converts what we can &lt;em&gt;do&lt;/em&gt; into what we &lt;em&gt;want to do&lt;/em&gt;. A great tool is designed to fit &lt;strong&gt;both&lt;/strong&gt; sides.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The touchscreens in modern devices might be closer to what we expect from futuristic high-tech devices. But just because they let us use a mobile web browser more efficiently, does that mean the future will be all chrome and touchscreens?&lt;/p&gt;

&lt;figure &gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Everything is chrome in the future!
        &lt;br/&gt;src:&lt;a href=&#34;http://www.unitedspongebob.com/&#34;&gt; 
            Nickelodeon
        &lt;/a&gt; 
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
    &lt;p&gt;&lt;a href=&#34;/img/blogger/chrome.jpeg&#34;&gt;
  &lt;img src=&#34;/img/blogger/chrome.jpeg&#34;  alt=&#34;Squidward dreams of a future where everything is literally chrome&#34; width=&#34;300em&#34;  /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;/figure&gt;

&lt;div class=&#34;clearboth&#34;&gt;&lt;/div&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Usability is hard&lt;/h1&gt;

&lt;p&gt;I don&amp;rsquo;t know what the future will bring. What I do know is that people are generally not very good at picking the right tools. And I see no reason why that could not also apply in the future. Revisiting the above definition, there are two things that can go wrong: 1) a tool fails to do &amp;ldquo;what we want to do&amp;rdquo;, or 2) that &amp;ldquo;what we can[not] do&amp;rdquo; prevents us from using the tool properly (or use it at all).&lt;/p&gt;

&lt;p&gt;The first one seems obvious. I need to drive a nail into a wall, so I use a hammer, not a wrench. But it&amp;rsquo;s not always that obvious, and we often end up using tools for things they were never intended to do. That&amp;rsquo;s cool if you&amp;rsquo;re aware of the problem and know what you are doing - MacGyver! - but just as foolish otherwise.&lt;/p&gt;

&lt;p&gt;The other type of tool abuse is more subtle: failing to bridge the tool&amp;rsquo;s abilities with those of it&amp;rsquo;s user. Buzz word: &lt;em&gt;usability&lt;/em&gt;. Creating a tool that can do something is the easy part - making it so that people can, will, and repeatedly use it is much harder. Simply put: the most effective tool is not really a tool if nobody uses it.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Examples I&amp;rsquo;d like to rant about&lt;/h1&gt;

&lt;p&gt;As a software engineer, I happen to see wrong-tool-syndrom a lot in - wait for it - software development. There are a few examples in particular that I have noticed recently and I would like to put them here for two reasons. To make my point (duh) and to rant.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Email chain discussions&lt;/h2&gt;

&lt;p&gt;The 80&amp;rsquo;s called, they want their mailing lists back! I totally and absolutely &lt;em&gt;despise&lt;/em&gt; mailing lists. Whenever I need to go to one for help with a tool, I do my best to ditch the tool. They used to have their purpose, nowadays they&amp;rsquo;re just obsolete usability nightmares.&lt;/p&gt;

&lt;p&gt;Email is simply the wrong tool for multi-user, text-based conversations. It gets worse with corporate email. It&amp;rsquo;s a nightmare to keep people on/off the receipient list; people get spammed. It&amp;rsquo;s insanely redundant - having to resend the entire past correspondence at the bottom of each message. And once someone hits &amp;ldquo;Reply&amp;rdquo; instead of &amp;ldquo;Reply All&amp;rdquo;, then the discussion gets fragmented and redundancy even increases.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&#34;http://xmpp.org/extensions/xep-0045.html&#34;&gt;much&lt;/a&gt; &lt;a href=&#34;http://trac-hacks.org/wiki/DiscussionPlugin&#34;&gt;better&lt;/a&gt; &lt;a href=&#34;http://www.coordino.com/&#34;&gt;tools&lt;/a&gt; available for online discussions. They were designed to allow for sane reading, backtracking, quoting and searching. And above all, they&amp;rsquo;re much less redundant than when using email.&lt;/p&gt;

&lt;figure &gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Mailing lists are sooo 80&amp;#39;s. And, unlike this here boombox, they *suck*.
        &lt;br/&gt;src:&lt;a href=&#34;http://www.wikipedia.org&#34;&gt; 
            Wikipedia
        &lt;/a&gt; 
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
    &lt;p&gt;&lt;a href=&#34;/img/blogger/boombox.jpeg&#34;&gt;
  &lt;img src=&#34;/img/blogger/boombox.jpeg&#34;  alt=&#34;A classic, cool cassette player from the eighties&#34; width=&#34;400em&#34;  /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;/figure&gt;

&lt;div class=&#34;clearboth&#34;&gt;&lt;/div&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Avoiding OOP features in OOP languages&lt;/h2&gt;

&lt;p&gt;Modern programming languages have some comfortable features, like just-in-time compilation, sandboxing or garbage collection. Take the .NET runtime. With C# as it&amp;rsquo;s &amp;ldquo;native&amp;rdquo; language, it supports polymorphism, i.e. virtual methods.&lt;/p&gt;

&lt;p&gt;I have seen people spend significant amounts of time &amp;ldquo;optimizing&amp;rdquo; their code to prevent the runtime from having to look for the right method to call in the inheritance chain. They end up with lots of &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/88c54tsw%28v=VS.100%29.aspx&#34;&gt;sealed&lt;/a&gt; classes which tell the compiler that no other classes may be derived from them. Consequently, the runtime will not need to check for overrides at execution time, thus making the code a few friggaseconds faster. Neat, huh?&lt;/p&gt;

&lt;p&gt;Not. My problem with this is not &lt;em&gt;that&lt;/em&gt; the classes are sealed (even though unit testing them can be a bitch). It is &lt;em&gt;why&lt;/em&gt; they are sealed. It&amp;rsquo;s not the result of some object-oriented design decision. It&amp;rsquo;s done with the sole purpose to prevent the CLR from doing something it was &lt;em&gt;designed&lt;/em&gt; to do. C# is object-oriented, so there are virtual methods - deal with it. If you are afraid of the cost, then C# is the wrong tool for your problem - maybe have a look at C/C++ instead.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Static methods in OOP languages&lt;/h2&gt;

&lt;p&gt;Within the last 10 years, many programmers have migrated from C++ to C#. I can recognize their (early) code right away: static methods everywhere. That is not object oriented. It&amp;rsquo;s method oriented - &lt;em&gt;procedural&lt;/em&gt;. There are only very few cases that justify the use of static methods in OOP. You are either using C# for the wrong reasons or you don&amp;rsquo;t understand OOP. Either way, you will not be able to use the tool the way it was designed to be used.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Videos in (tech) blogs&lt;/h2&gt;

&lt;p&gt;When I go to your blog, I want to read it - not watch a stupid video. Chances are my mobile browser does not know your codec, and if it does, it still looks like crap. And do you really expect me to turn down my music in order to listen to you say stuff you were too lazy to write down? There&amp;rsquo;s so many things that make videos bad for this: I can&amp;rsquo;t skim over the content like I usually do - instead I end up jumping around in the timeline, buffering, cursing. Fuck your &lt;a href=&#34;http://de.wikipedia.org/wiki/Vlog&#34;&gt;vlog&lt;/a&gt; or whatever you call it, do a podcast if that&amp;rsquo;s your thing. If you have a blog, I want to &lt;em&gt;read&lt;/em&gt; it. Period.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Perforce for version control&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;Perforce&amp;rdquo; and &amp;ldquo;control&amp;rdquo; is an contradiction. There you go. I just had to put this one in.&lt;/p&gt;

&lt;figure &gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Me when I see your vlog
        &lt;br/&gt;src:&lt;a href=&#34;http://www.thestupiditburns.com&#34;&gt; 
            thestupiditburns.com
        &lt;/a&gt; 
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
    &lt;p&gt;&lt;a href=&#34;/img/blogger/thestupiditburns.jpeg&#34;&gt;
  &lt;img src=&#34;/img/blogger/thestupiditburns.jpeg&#34;  alt=&#34;when something is so stupid that makes your head hurt&#34; width=&#34;450em&#34;  /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;/figure&gt;

&lt;div class=&#34;clearboth&#34;&gt;&lt;/div&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;The thin line between a pragmatist and a moron&lt;/h1&gt;

&lt;p&gt;Now, you cannot always switch tools. Switching language on a gazillion LOC project is not going to happen overnight. Then, at least try to use the tools you have the way the were designed to be used. Make the most of what you have, and don&amp;rsquo;t try to bastardize it just because you are too lazy to use it the right way.&lt;/p&gt;

&lt;p&gt;What I really hate is that engineers that abuse a tool beyond recognition are often admired. Yes, it&amp;rsquo;s great to be able to improvise when required - but it&amp;rsquo;s far more important to be able to &lt;a href=&#34;http://www.engineyard.com/blog/2011/the-number-one-trait-of-a-great-developer/&#34;&gt;decide&lt;/a&gt; what the right tool for the job/situation/user is. A construction worker that uses a screwdriver to punch holes into walls instead of using a drill will not be considered creative, but a moron. Why do the opposite in software?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Understanding and testing enum flags</title>
      <link>http://raph.es/blog/2011/09/Understanding-and-testing-enum-flags/</link>
      <pubDate>Wed, 14 Sep 2011 05:53:00 IST</pubDate>
      
      <guid>http://raph.es/blog/2011/09/Understanding-and-testing-enum-flags/</guid>
      <description>

&lt;p&gt;For those who know all about flags and &lt;a href=&#34;http://en.wikipedia.org/wiki/Binary_numeral_system&#34;&gt;binary arithmetics&lt;/a&gt; and want to insult me by responding to my careful writing with ignorance, then feel free to skip over the following section.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Some basics on flags&lt;/h1&gt;

&lt;p&gt;Flag enums are a convenient way to store multiple &lt;code&gt;boolean&lt;/code&gt; flags in one value. Typically an &lt;code&gt;Integer&lt;/code&gt; is ideal for this sort of thing, but other udnerlying types are allowed. In .NET, no matter if in 32-bit or 64-bit mode, an Integer has 4 bytes, equal 32bits. So we have something like this (btw, all the examples here are little endian):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;00000000 00000000 00000000 00000001  // number &amp;quot;1&amp;quot; as a 32bit binary number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When using flags, every position in a row of zeroes and ones can be considered an independent &lt;code&gt;boolean&lt;/code&gt; value. The trick is how to flip and read those particular values. Since in binary, each position is a power of two, you can map enums to distinct positions as such:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Flags]
public enum MyFlags
{
    Nothing = 0, 
    StateOne = 1,
    StateTwo = 2,
    StateThree = 4
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;ldquo;Huh, why is &lt;code&gt;StateThree&lt;/code&gt; mapped to the value 4?&amp;rdquo; Because we mapped our third state to the third &lt;em&gt;bit&lt;/em&gt;. If I assign that enum value to a number, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int myFlag = MyFlags.StateThree;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then &lt;code&gt;myFlag&lt;/code&gt; is equal to the numerical value &amp;ldquo;4&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;00000000 00000000 00000000 00000100  // number &amp;quot;4&amp;quot; as a 32bit binary number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that our third bit is flipped, thus &lt;code&gt;StateThree&lt;/code&gt;. The whole point here is that you can have several of our defined states in a single number, since each state&amp;rsquo;s value is a power of two and thverefor has a distinct position in the &amp;ldquo;row&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int myFlag = 0; // initialize
myFlag |= MyFlags.StateOne;
myFlag |= MyFlags.StateThree;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just used the arithmetical OR operator to combine our states.This is what happens internally:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   00000000 00000000 00000000 00000000  // initial value of &amp;quot;myFlag&amp;quot;
OR 00000000 00000000 00000000 00000001  // &amp;quot;MyFlags.StateOne&amp;quot;
OR 00000000 00000000 00000000 00000100  // &amp;quot;MyFlags.StateThree&amp;quot;
----------------------------------------------------------------------------
   00000000 00000000 00000000 00000101  // result; number &amp;quot;5&amp;quot; in 32bit binary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the flags for both states can co-exist within a single &lt;code&gt;Integer&lt;/code&gt; value. Note how, in order to store the decimal number 5 in binary form, you require 2 &amp;ldquo;1&amp;rdquo; bits. That&amp;rsquo;s because 5 is not a power of two. Typically you will want all of your flag values to be a power of two in order to set one single bit at a time. There are, however, cases in which you might really want to use numbers that are not powers of two.&lt;/p&gt;

&lt;p&gt;I will not go into those examples too deep, but one common case is color representation. In a nutshell, your three basic colors red, green and blue could be powers of two, and each resulting combined color would be a combination of those flags. The below is a very simplified example of how that could look like. It&amp;rsquo;s not necessarily correct in terms of mixing colors, but hey, I&amp;rsquo;m color blind and frankly don&amp;rsquo;t really give a shit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;000 // 0: black
001 // 1: red
010 // 2: green
011 // 3: yellow
100 // 4: blue
101 // 5: purple
110 // 6: blue-green (woah!)
111 // 7: white
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can retrieve a flag &amp;ldquo;manually&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// given the above example, will return &amp;quot;true&amp;quot;
bool hasStateThree = (myFlag &amp;amp; MyFlags.StateThree) == MyFlags.StateThree
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;using the arithemtical AND operator, which does the opposite of what we did before with OR. This technique is often referred to as masking.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    00000000 00000000 00000000 00000101  // &amp;quot;myFlag&amp;quot;
AND 00000000 00000000 00000000 00000100  // &amp;quot;MyFlags.StateThree&amp;quot;; the mask
------------------------------------------------------------------------------
    00000000 00000000 00000000 00000100  // result; equal to MyFlags.StateThree!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a prettier way to do this exact same thing in .NET. The static method &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.enum.hasflag.aspx&#34;&gt;&lt;code&gt;Enum.HasFlag&lt;/code&gt;&lt;/a&gt; does the same as above, hiding the ugly distracting binary operators:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bool hasStateThree = myFlag.HasFlag(MyFlags.StateThree); //masks using AND behind the scenes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, let&amp;rsquo;s stop our little excursion into binary arithmetics right here. Back to topic.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Enforcing the contract&lt;/h1&gt;

&lt;p&gt;There is a problem hidden herein. We saw that in most cases it makes sense to use only underlying enum values that are powers of two. So you code up something beautiful and do exactly that. Now, what if someone (especially you) changes that code later on, adds a new value to the enum and does not know (or forgets) that the separate state flags have to be powers of two? The compiler will not prevent you from using values in that enum that are not a power of two. For example, to the compiler (and unaware readers of your code, although the comment might give it away) this looks like a valid thing to do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Flags]
public enum MyFlags
{
    Nothing = 0,
    StateOne = 1,
    StateTwo = 2,
    StateThree = 4,
    StateFour = 8,
    StateFive = 5  // d&#39;oh! not a power of two! 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Technically this is fine and might even be something you want to do (i.e. if &lt;code&gt;StateFive&lt;/code&gt; is actually supposed to include both &lt;code&gt;StateOne&lt;/code&gt; and &lt;code&gt;StateThree&lt;/code&gt; at the same time). If you want to keep the values all powers of two, you will have to hope that your current and future colleagues will all thoroughly read the documentation you wrote up so carefully. lol.&lt;/p&gt;

&lt;p&gt;Automated tests to the rescue! You can write a test that checks each value of the enum and fails if it&amp;rsquo;s not a power of two. That way, even if someone accidentally adds an &amp;ldquo;invalid&amp;rdquo; number, the test will fail and point out the problem. This is a perfect case for unit(ish) tests, which are supposed to uphold your code&amp;rsquo;s contracts. In this case, the constraint put upon the code is that all the enum values have to be a power of two, so let&amp;rsquo;s enforce that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using nunit.framework;
[TestFixture]
public class MyFlagsTest
{
    /// &amp;lt;summary&amp;gt;
    /// Checks if all enum values are valid, i.e. powers of two.
    /// Source of the checking algorithm:
    /// http://stackoverflow.com/questions/600293/how-to-check-if-a-number-is-a-power-of-2
    /// &amp;lt;/summary&amp;gt;
    [Test]
    public void MyFlags_Always_ValuesArePowerOfTwo([ValueSource(&amp;quot;AllEnumValues&amp;quot;)]MyFlags enumValue)
    {
        int value = (int) enumValue;
        // must exclude zero to avoid overflow
        bool isPowerOfTwo = (value != 0) &amp;amp;&amp;amp; ((value &amp;amp; (value - 1)) == 0);
        // don&#39;t forget that zero is a valid value as well
        bool isValidEnumValue = value == 0 || isPowerOfTwo;

        Assert.That(isValidEnumValue, Is.True, 
            &amp;quot;Value &amp;quot; + value + &amp;quot; of flag &amp;quot; + enumValue + &amp;quot; is not a power of two.&amp;quot;);
     }

    // will be called by NUnit to resolve test parameters
    // when referenced using ValueSourceAttribute
    private Array AllEnumValues()
    {
        return Enum.GetValues(typeof(MyFlags));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The test uses a quick and quite efficient way to determine if a number is a power of two. It performs an AND operation on the number and that same value minus one. For powers of two, the result will be 0. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     100  // 4, power of two
AND  011  // 4 - 1 =3
---------------------------------
     000  // zero! yay!

     101  // 5, not power of two
AND  100  // 5 - 1 = 4
---------------------------------
     100  // not zero! yay!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the error message that clearly points out the problem. The (visual) complexity of the test alone will look scary to whoever breaks it if he or she does not have some prose explaining what&amp;rsquo;s going on. Don&amp;rsquo;t expect people to get this sort of test right away. I know I wouldn&amp;rsquo;t. If they&amp;rsquo;re scared of the test, chances are they might get rid of it just to fix the build, and your initial design and good intentions disappear together with it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Manually caching configuration sections to avoid the .NET 4 bug</title>
      <link>http://raph.es/blog/2011/05/Manually-caching-configuration-sections-to-avoid-the-.NET-4-bug/</link>
      <pubDate>Fri, 27 May 2011 08:42:00 IST</pubDate>
      
      <guid>http://raph.es/blog/2011/05/Manually-caching-configuration-sections-to-avoid-the-.NET-4-bug/</guid>
      <description>

&lt;p&gt;There is a &lt;a href=&#34;http://social.msdn.microsoft.com/Forums/en/clr/thread/1e14f665-10a3-426b-a75d-4e66354c5522&#34;&gt;bug in the .NET 4 ConfigurationManager&lt;/a&gt; that has been causing me some headache. If you are trying to run .NET 4 code from a network drive and are getting SecurityExceptions, you might be facing it. When you want to read a section from your App.config - I&amp;rsquo;ll creatively call it &lt;em&gt;MySection&lt;/em&gt; - you typically do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MySection mySection = ConfigurationManager.GetSection(&amp;quot;MySection&amp;quot;) as MySection;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In your XML configuration, that section is registered with a type - often referred to as the section handler, e.g. &lt;em&gt;MySectionHandler&lt;/em&gt;, which is implemented in &lt;em&gt;SomeAssembly&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;configuration&amp;gt;
    &amp;lt;configSections&amp;gt;
        &amp;lt;section name=&amp;quot;MySection&amp;quot; type=&amp;quot;MySectionHandler, MyAssembly&amp;quot;/&amp;gt;
    &amp;lt;/configSections&amp;gt;
    &amp;lt;MySection&amp;gt;
        &amp;lt;!-- some custom configuration here --&amp;gt;
    &amp;lt;/MySection&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That type is what glues the XML to your original call to &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.configuration.configurationmanager.aspx&#34;&gt;&lt;code&gt;ConfigurationManager&lt;/code&gt;&lt;/a&gt;. It tells the .NET framework how to transform the configuration text into .NET objects - that process is called &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms731073.aspx&#34;&gt;deserialization&lt;/a&gt;. The &amp;ldquo;serial&amp;rdquo; text is transformed into a higher-level, non-serial data structure. Let&amp;rsquo;s have a look at a common section handler implementation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MySectionHandler: IConfigurationSectionHandler
{
    public object Create(object parent, object configContext, XmlNode section)
    {
        MySection result = // deserialize instance of MySection
        return result;
    }
}

[XmlRoot(&amp;quot;MySection&amp;quot;)]
public class MySection
{
    // some custom configuration here
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this scenario, your call to &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.configuration.configurationmanager.getsection.aspx&#34;&gt;ConfigurationManager.&lt;code&gt;GetSection()&lt;/code&gt;&lt;/a&gt; causes the run-time to read in the App.config XML as text, pass it in to &lt;em&gt;MySectionHandler&lt;/em&gt;, which in turn returns the deserialized object to the original caller. Now, the problem is that in .NET 4, ConfigurationManager.GetSection() has a bug. When you are running you application from a network location, it seems to consider the configuration files &amp;ldquo;unsafe&amp;rdquo; and will give you security exceptions when attempting to read the configuration. Microsoft support recommends a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms134265.aspx&#34;&gt;workaround&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MySection mySection = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None).GetSection(&amp;quot;MySection&amp;quot;); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this alternative call seems very much the same, there are two fundamental differences:
1. It only works for sections that are derived from &lt;code&gt;ConfigurationSection&lt;/code&gt;
1. &lt;code&gt;OpenExeConfiguration&lt;/code&gt; does not cache deserialized sections&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;&lt;code&gt;ConfigurationSection&lt;/code&gt; vs. &lt;code&gt;IConfigurationSectionHandler&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;The &lt;em&gt;first&lt;/em&gt; turns out to be a problem for those who create section handlers by implementing the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.configuration.iconfigurationsectionhandler.aspx&#34;&gt;&lt;code&gt;IConfigurationSectionHandler&lt;/code&gt;&lt;/a&gt; interface (as I did in the above example). This pattern roots in the early days of the .NET framework and is obsolete since .NET 2.0. Nevertheless, it is very convenient. All you need to do is have a class implement the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.configuration.iconfigurationsectionhandler.create.aspx&#34;&gt;&lt;code&gt;Create()&lt;/code&gt;&lt;/a&gt; method and return an object. How it creates the object is secondary, but typically you will use an &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer.aspx&#34;&gt;&lt;code&gt;XmlSerializer&lt;/code&gt;&lt;/a&gt; with the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.xml.xmlnode.aspx&#34;&gt;&lt;code&gt;XmlNode&lt;/code&gt;&lt;/a&gt; parameter for deserialization. Also, since this is just an interface, you have complete freedom regarding your class design.&lt;/p&gt;

&lt;p&gt;In order to make use of the recommended workaround you have to derive your section implementation from &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.configuration.configurationsection.aspx&#34;&gt;&lt;code&gt;ConfigurationSection&lt;/code&gt;&lt;/a&gt;. Using the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms228060.aspx&#34;&gt;.NET configuration API&lt;/a&gt; you can define your section with a bit more power and flexibility than using the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.xml.serialization.aspx&#34;&gt;XML serialization API&lt;/a&gt;. You can have the run-time validate that the values in your configuration are of a certain numerical range or default to specific strings - handy stuff. The downside is, though, that it&amp;rsquo;s usage is quite verbose. You need to implement new classes with lots of abstract methods, which gets quite bloated once you are working with complex XML, especially when you compare it with the much leaner &lt;code&gt;IConfigurationSectionHandler&lt;/code&gt; pattern.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Manual vs. automatic caching&lt;/h1&gt;

&lt;p&gt;While using the Configuration API might be a bit clunky, it&amp;rsquo;s something you can get used to. The &lt;em&gt;second&lt;/em&gt; issue you will encounter when using the above workaround is a bigger problem. &lt;code&gt;OpenExeConfiguration()&lt;/code&gt; is designed to allow modifications to the underlying configuration. Therefor, by design, it cannot cache the sections it deserializes. If you take code that expects the caching of &lt;code&gt;ConfigurationManager.GetSection()&lt;/code&gt; and just replace it with calls to &lt;code&gt;OpenExeConfiguration().GetSection()&lt;/code&gt;, you can end up repeating the file I/O and deserialization process over and over again - which can lead to a serious performance impact.&lt;/p&gt;

&lt;p&gt;Given the scenario of my above example, you could verify the caching with the following pseudo-test:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object first  = ConfigurationManager.GetSection(&amp;quot;MySection&amp;quot;);
object second = ConfigurationManager.GetSection(&amp;quot;MySection&amp;quot;);
// first == second will give &#39;true&#39;

first =  ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None).GetSection(&amp;quot;MySection&amp;quot;));
second = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None).GetSection(&amp;quot;MySection&amp;quot;));
// first == second will give &#39;false&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The obvious way to get around that is to hold on to a reference to your Configuration object. But that&amp;rsquo;s not applicable all the time and feels a bit dirty - you end up with references to the same object all over the place. Also, since this is just a bug in the .NET framework that is supposed to be fixed with SP1, you would be making lots of modifications to your code that will be useless as soon as SP1 is released. Instead, you could write an &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb383977.aspx&#34;&gt;extension method&lt;/a&gt; that will use the recommended workaround call, but include simple &amp;ldquo;manual&amp;rdquo; caching.&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;A workaround for the workaround&lt;/h1&gt;

&lt;p&gt;First, we create a simple extension method that will be available on &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.configuration.configuration.aspx&#34;&gt;Configuration&lt;/a&gt; instances.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class ConfigurationExtensions
{
    private static readonly CachedConfigurationSectionLoader cachedSections = new CachedConfigurationSectionLoader();

    public static ConfigurationSection GetSectionCached(this Configuration configuration, string sectionName)
    {
        return cachedSections.GetSection(sectionName);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The extension method makes use of a class called &lt;code&gt;CachedConfigurationSectionLoader&lt;/code&gt;. It simply maintains a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd287191.aspx&#34;&gt;&lt;code&gt;ConcurrentDictionary&lt;/code&gt;&lt;/a&gt; to store the deserialized objects in a clean and thread-safe manner.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Configuration;
using System.Collections.Concurrent;

public class CachedConfigurationSectionLoader
{
    private readonly Configuration exeConfiguration;
    private readonly ConcurrentDictionary&amp;lt;string, ConfigurationSection&amp;gt; configurationSectionCache = new ConcurrentDictionary&amp;lt;string, ConfigurationSection&amp;gt;();

    public CachedConfigurationSectionLoader()
        : this(ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None))
    { }

    // use this for custom configuration objects
    public CachedConfigurationSectionLoader(Configuration configuration)
    {
        this.exeConfiguration = configuration;
    }

    public void ClearCache()
    {
        this.configurationSectionCache.Clear();
    }

    public ConfigurationSection GetSection(string sectionName)
    {
        return this.GetSection(sectionName, this.exeConfiguration);
    }

    public ConfigurationSection GetSection(string sectionName, Configuration configuration)
    {
        Func&amp;lt;string, ConfigurationSection&amp;gt; configurationSectionFactory = (s) =&amp;gt; exeConfiguration.GetSection(s);
        ConfigurationSection result = configurationSectionCache.GetOrAdd(sectionName, configurationSectionFactory);

        return result;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usage of the extension method looks almost exactly like the suggested workaround, and is not far away from our original calls to &lt;code&gt;ConfigurationManager.GetSection()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MySection mySection = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None).GetSectionCached(&amp;quot;MySection&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can change all of your existing calls to &lt;code&gt;ConfigurationManager.GetSection()&lt;/code&gt; in place, without having to redesign your classes just to get around this bug. Reverting these changes after SP1 is quite simple. You could just change all the calls back to as they were before the workaround, or - if you really want to keep changes minimal - simply replace the extension method with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class ConfigurationExtensions
{
    public static ConfigurationSection GetSectionCached(this Configuration configuration, string sectionName)
    {
        // redirect to built-in cached function
        return ConfigurationManager.GetSection(sectionName) as ConfigurationSection;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;Additional resources:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://social.msdn.microsoft.com/Forums/en/clr/thread/1e14f665-10a3-426b-a75d-4e66354c5522&#34;&gt;That nasty bug in the .NET 4 ConfigurationManager.GetSection()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms731073.aspx&#34;&gt;Serialization and Deserialization in .NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.codeproject.com/KB/dotnet/mysteriesofconfiguration.aspx&#34;&gt;Unraveling the Mysteries of .NET 2.0 Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.collections.concurrent.aspx&#34;&gt;The awesome concurrent collections in .NET 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Conditional References in Visual Studio projects</title>
      <link>http://raph.es/blog/2011/05/Conditional-References-in-Visual-Studio-projects/</link>
      <pubDate>Thu, 05 May 2011 08:42:00 IST</pubDate>
      
      <guid>http://raph.es/blog/2011/05/Conditional-References-in-Visual-Studio-projects/</guid>
      <description>

&lt;p&gt;Visual Studio does a good job in hiding the MSBuild configurations from it&amp;rsquo;s users. MSBuild is quite flexible and powerful - but the VS user interface only gives you control over a tiny piece of it. One handy feature I believe deserves more attention in the IDE is &lt;em&gt;conditional references&lt;/em&gt;. When you add a reference to one of your projects, by default it will be static. No matter how you &lt;a href=&#34;/2011/04/targeting-platforms-in-visual-studio.html&#34;&gt;modify your solution configuration or platform settings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But some libraries are platform dependent. If you build your solution as 64bit, you will not want to use a version of a library that is restricted to 32bit platforms. Visual Studio does not give you a way to put conditions on your references. Fortunately, MSBuild does. When referencing an assembly in VS, a &lt;code&gt;Reference&lt;/code&gt; (or &lt;code&gt;ProjectReference&lt;/code&gt;) element is added to your project file&amp;rsquo;s XML containing details of the assembly and a &lt;code&gt;HintPath&lt;/code&gt; to it&amp;rsquo;s (supposed) location.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Reference Include=&amp;quot;MyAssembly, processorArchitecture=MSIL&amp;quot;&amp;gt;
    &amp;lt;SpecificVersion&amp;gt;False&amp;lt;/SpecificVersion&amp;gt;
    &amp;lt;HintPath&amp;gt;path\to\MyAssembly.dll&amp;lt;/HintPath&amp;gt;
&amp;lt;/Reference&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Setting the conditions&lt;/h1&gt;

&lt;p&gt;Using your favorite text editor, you can add a &lt;code&gt;Condition&lt;/code&gt; attribute to any reference in your project file, telling MSBuild when to use it (or not). This allows you to reference assemblies of different architecture and make sure they are used according to which platform you are targeting. In this case, a reference could look like the following in your project file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Reference Include=&amp;quot;MyAssembly, processorArchitecture=MSIL&amp;quot;
           Condition=&amp;quot;&#39;$(Platform)&#39; == &#39;x86&#39;&amp;quot;&amp;gt;
    &amp;lt;SpecificVersion&amp;gt;False&amp;lt;/SpecificVersion&amp;gt;
    &amp;lt;HintPath&amp;gt;path\to\32bit\MyAssembly.dll&amp;lt;/HintPath&amp;gt;
&amp;lt;/Reference&amp;gt;
&amp;lt;Reference Include=&amp;quot;MyAssembly, processorArchitecture=MSIL&amp;quot; 
           Condition=&amp;quot;&#39;$(Platform)&#39; == &#39;x64&#39;&amp;quot;&amp;gt;
    &amp;lt;SpecificVersion&amp;gt;False&amp;lt;/SpecificVersion&amp;gt;
    &amp;lt;HintPath&amp;gt;path\to\64bit\MyAssembly.dll&amp;lt;/HintPath&amp;gt;
&amp;lt;/Reference&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works because in MSBuild the reference elements are &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms164283%28v=VS.100%29.aspx&#34;&gt;&lt;code&gt;Item&lt;/code&gt; elements&lt;/a&gt;. Many element types can have condition attributes. If you look at other parts of your project file you will probably see that the project configuration and platform sections also use conditions similar to the above example. There are &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms164307.aspx&#34;&gt;other ways to define conditional logic in MSBuild&lt;/a&gt;, but this is probably the quickest and most understandable. If you plan to do more funky stuff, have a look at &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms164282.aspx&#34;&gt;&lt;code&gt;&amp;lt;Choose&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Otherwise&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;figure &gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Condition evaluates to *False*
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
    &lt;p&gt;&lt;a href=&#34;/img/blogger/reference-warning.jpeg&#34;&gt;
  &lt;img src=&#34;/img/blogger/reference-warning.jpeg&#34;   width=&#34;200em&#34;  /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;/figure&gt;

&lt;div class=&#34;clearboth&#34;&gt;&lt;/div&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;The &lt;code&gt;Platform&lt;/code&gt; variable&lt;/h1&gt;

&lt;p&gt;Note that in my example I am querying the &lt;code&gt;Platform&lt;/code&gt; variable - &lt;em&gt;not&lt;/em&gt; &lt;code&gt;Configuration&lt;/code&gt;. I have noticed a practice &lt;a href=&#34;http://dev.monogram.sk/websvn/filedetails.php?repname=graphstudio&amp;amp;path=%2Ftrunk%2Fgraphstudio.sln&#34;&gt;on teh webz&lt;/a&gt; that suggests you create new configurations named &lt;em&gt;Debug64&lt;/em&gt; and &lt;em&gt;Release64&lt;/em&gt;, then switch references based on the &lt;code&gt;Configuration&lt;/code&gt; variable. While this technically works the same way, it is logically incorrect. &lt;code&gt;Configuration&lt;/code&gt; and &lt;code&gt;Platform&lt;/code&gt; settings are two different concerns in Visual Studio and it is unwise to mix them. It&amp;rsquo;s messy, redundant and generates loads of unnecessary lines in your solution and project files.&lt;/p&gt;

&lt;p&gt;Assuming that your project has nicely &lt;a href=&#34;http://en.wikipedia.org/wiki/Separation_of_concerns&#34;&gt;separated concerns&lt;/a&gt; you should not have to make this change in more than one or &lt;a href=&#34;http://en.wikipedia.org/wiki/Rule_of_three_%28programming%29&#34;&gt;three&lt;/a&gt; places. If you &lt;em&gt;are&lt;/em&gt; facing a large number of projects that need this additional logic, this XML operation can easily be automated via a script or macro.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Targeting Platforms in Visual Studio</title>
      <link>http://raph.es/blog/2011/04/Targeting-Platforms-in-Visual-Studio/</link>
      <pubDate>Tue, 12 Apr 2011 19:16:00 IST</pubDate>
      
      <guid>http://raph.es/blog/2011/04/Targeting-Platforms-in-Visual-Studio/</guid>
      <description>

&lt;p&gt;None of Visual Studio&amp;rsquo;s features is more essential than compiling text to binary assemblies - in VS terminology: &amp;ldquo;building&amp;rdquo;. Since this is the single most important task you use an IDE for, it is crucial that you understand how it works if you want to have more control over what you build, and especially for what target platform - e.g. when automating your builds for continuous integration.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Configuration != Configuration&lt;/h1&gt;

&lt;figure &gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;
        L: Solution configuration; R: Solution platform
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
    &lt;p&gt;&lt;a href=&#34;/img/blogger/configuration_platform_selector.jpeg&#34;&gt;
  &lt;img src=&#34;/img/blogger/configuration_platform_selector.jpeg&#34;     /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;/figure&gt;

&lt;div class=&#34;clearboth&#34;&gt;&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;solution configuration&lt;/em&gt; and &lt;em&gt;solution platform&lt;/em&gt; selectors are two of the most used and at the same time most misunderstood UI elements in Visual Studio. You would think that they allowed you to define with which configuration and for which target platform your code will be compiled. What users &lt;em&gt;expect&lt;/em&gt; is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SLN config + SLN platform =&amp;gt; Binary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately, it is not that simple. There is a chain of five independent variables that define how a single project in your solution will be compiled. The solution configuration/platform settings from the VS toolbar are the first two. As a pair, they determine which project configuration and platform settings will be used to build a project. Those two then eventually define which &lt;em&gt;platform target&lt;/em&gt; the compiler will use to eventually create your assembly. Change any of those variables and you can end up with an entirely different value for &amp;ldquo;platform target&amp;rdquo; when building your solution. So in reality, your chain of platform configuration looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SLN config + SLN platform =&amp;gt; PROJ config + PROJ platform =&amp;gt; PROJ platform target =&amp;gt; Binary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I will attempt to shed some light on the different parts of this chain and present a way - well, &lt;em&gt;my&lt;/em&gt; way - of dealing with it&amp;rsquo;s complexity in order to regain control of this process. I am going to roll up this chain from the end.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Project configurations&lt;/h1&gt;

&lt;p&gt;A project in Visual Studio represents a binary that will be generated after compilation. As you would expect, the &lt;em&gt;project settings&lt;/em&gt; window allows you to define &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/0hkyezwy%28v=VS.100%29.aspx&#34;&gt;various options&lt;/a&gt; around that binary - most notably where the file will be copied to, if the compiler will optimize the generated IL (i.e. in Release mode) and what platform architecture you are targeting. Those settings are stored in a &lt;em&gt;project file&lt;/em&gt;.&lt;/p&gt;

&lt;figure &gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;
        *Platform* !=*Platform target* o_O
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
    &lt;p&gt;&lt;a href=&#34;/img/blogger/project_settings.jpeg&#34;&gt;
  &lt;img src=&#34;/img/blogger/project_settings.jpeg&#34;   width=&#34;500em&#34;  /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;/figure&gt;

&lt;div class=&#34;clearboth&#34;&gt;&lt;/div&gt;

&lt;p&gt;Project files are essentially just &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/5dy88c2e.aspx&#34;&gt;XML(ish) input files&lt;/a&gt; for a tool called &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/wea2sca5%28v=vs.90%29.aspx&#34;&gt;MSBuild&lt;/a&gt;. It is Microsoft&amp;rsquo;s build tool, logically very similar to &lt;a href=&#34;http://nant.sourceforge.net/&#34;&gt;NAnt&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/Build_automation&#34;&gt;the likes&lt;/a&gt;. As a matter of fact, &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms171468%28v=VS.100%29.aspx&#34;&gt;Visual Studio uses MSBuild behind the scenes&lt;/a&gt; whenever you hit &amp;ldquo;build&amp;rdquo; in the IDE.&lt;/p&gt;

&lt;p&gt;If you open a project file in your favorite text editor you will find a list of &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/t4w159bs.aspx&#34;&gt;&lt;code&gt;PropertyGroup&lt;/code&gt;&lt;/a&gt; elements representing your project&amp;rsquo;s build configurations. Each has an attribute &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/7szfhaft.aspx&#34;&gt;&lt;code&gt;Condition&lt;/code&gt;&lt;/a&gt; that serves as an identifier for a group of project-related settings. The unique key used as a condition usually consists of two values: &lt;em&gt;configuration&lt;/em&gt; and &lt;em&gt;platform&lt;/em&gt;, e.g. &lt;code&gt;Debug|x86&lt;/code&gt;. In that PropertyGroup element you may find a child called &lt;code&gt;PlatformTarget&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;PropertyGroup Condition=&amp;quot;&#39;$(Configuration)|$(Platform)&#39; == &#39;Release|AnyCPU&#39;&amp;quot;&amp;gt;
    &amp;lt;DebugType&amp;gt;pdbonly&amp;lt;/DebugType&amp;gt;
    &amp;lt;Optimize&amp;gt;true&amp;lt;/Optimize&amp;gt;
    &amp;lt;OutputPath&amp;gt;bin\release&amp;lt;/OutputPath&amp;gt;
    &amp;lt;DefineConstants&amp;gt;TRACE&amp;lt;/DefineConstants&amp;gt;
    &amp;lt;ErrorReport&amp;gt;prompt&amp;lt;/ErrorReport&amp;gt;
    &amp;lt;WarningLevel&amp;gt;4&amp;lt;/WarningLevel&amp;gt; 
&amp;lt;/PropertyGroup&amp;gt;
&amp;lt;PropertyGroup Condition=&amp;quot;&#39;$(Configuration)|$(Platform)&#39; == &#39;Debug|x86&#39;&amp;quot;&amp;gt;
    &amp;lt;DebugSymbols&amp;gt;true&amp;lt;/DebugSymbols&amp;gt;
    &amp;lt;OutputPath&amp;gt;bin\x86\debug\&amp;lt;/OutputPath&amp;gt;
    &amp;lt;DefineConstants&amp;gt;DEBUG;TRACE&amp;lt;/DefineConstants&amp;gt;
    &amp;lt;DebugType&amp;gt;full&amp;lt;/DebugType&amp;gt;
    &amp;lt;PlatformTarget&amp;gt;x86&amp;lt;/PlatformTarget&amp;gt;
    &amp;lt;ErrorReport&amp;gt;prompt&amp;lt;/ErrorReport&amp;gt;
&amp;lt;/PropertyGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The value in &lt;code&gt;PlatformTarget&lt;/code&gt; is what the compiler &lt;em&gt;actually&lt;/em&gt; uses to determine which platform your assembly will be generated for. This gives us the simplest and most direct part of the configuration chain:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PROJ platform target =&amp;gt; Binary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The condition on the &lt;code&gt;PropertyGroup&lt;/code&gt; element has to evaluate to &lt;code&gt;true&lt;/code&gt; in order for that &lt;code&gt;PlatformTarget&lt;/code&gt; value to be used. They are simple string parameters that get passed into MSBuild as parameters. In the configuration chain, it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PROJ config + PROJ platform =&amp;gt; PROJ platform target =&amp;gt; Binary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can build a project file with MSBuild using the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms229859.aspx&#34;&gt;Visual Studio command prompt&lt;/a&gt;. Alternatively you can call MSBuild directly (for .NET 4 typically &lt;code&gt;C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe&lt;/code&gt;). MSBuild takes parameters to determine which configuration and platform it will use, eventually reading one of those PropertyGroup elements and then doing it&amp;rsquo;s magic.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; MSBuild &amp;quot;MyProject.csproj&amp;quot; /p:Configuration=&amp;quot;Release&amp;quot; /p:Platform=&amp;quot;Any CPU&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Solution configurations&lt;/h1&gt;

&lt;p&gt;Solution configurations are a different story. While projects are directly related to binaries of your generated application, a solution is not. It is a mere container for projects. And yet, it too has a &amp;ldquo;configuration&amp;rdquo; and a &amp;ldquo;platform&amp;rdquo; setting. You can use MSBuild with the same parameters to build a solution, like you would do with a project. How does this make sense?&lt;/p&gt;

&lt;p&gt;A solution is a &amp;ldquo;meta-project&amp;rdquo;, and it&amp;rsquo;s configuration and platform settings can be described as &amp;ldquo;meta-settings&amp;rdquo;. Visual Studio uses them to tell MSBuild which parameters to use when building each &lt;em&gt;project&lt;/em&gt; within it. The solution holds a list of projects&amp;rsquo; &lt;code&gt;Active Configuration&lt;/code&gt; for each possible combination of solution configuration and solution platform (there&amp;rsquo;s other stuf in there as well, but let&amp;rsquo;s ignore that for now). Whatever combination of &lt;em&gt;solution&lt;/em&gt; configuration and platform you set, that becomes the active configuration, and MSBuild needs to know which &lt;em&gt;project&lt;/em&gt; configuration and solution those map to - for each and every project. That gives us A x B x C active configurations where A: number of projects, B: number of solution configurations and C: number or solution platforms.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{74482536-2654-4B15-B457-9425A05341E6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU 
{74482536-2654-4B15-B457-9425A05341E6}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU 
{74482536-2654-4B15-B457-9425A05341E6}.Debug|x86.ActiveCfg = Debug|Any CPU 
{74482536-2654-4B15-B457-9425A05341E6}.Release|Any CPU.ActiveCfg = Release|Any CPU 
{74482536-2654-4B15-B457-9425A05341E6}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU 
{74482536-2654-4B15-B457-9425A05341E6}.Release|x86.ActiveCfg = Release|Any CPU
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That completes our configuration chain from earlier, which for the record now looks like this again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SLN config + SLN platform =&amp;gt; PROJ config + PROJ platform =&amp;gt; PROJ platform platform =&amp;gt; Binary
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;The Scary Part&lt;/h1&gt;

&lt;p&gt;It is important to understand that the relationship between solution settings and project settings is not as direct as it may seem. Setting the solution to &lt;code&gt;Release|x64&lt;/code&gt; does not necessarily mean you are switching each project to exactly that setting. Visual Studio will constantly keep track of how you configure the project settings and associate them with the currently selected solution settings. VS will update the active configuration accordingly whenever a project&amp;rsquo;s configuration or target platform is modified. Whenever you switch your active configuration, and then make a change to a project&amp;rsquo;s settings, VS stores those as that project&amp;rsquo;s active configuration in the solution file. It is easy to forget that and to unintentionally submit the change into source control.&lt;/p&gt;

&lt;p&gt;Now picture a team of developers, unaware of all this, working in the same solution. Adding new projects, modifying project settings - every once in a while switching platforms. After some time, maybe many months (and many VCS submits) that list of active configurations in the solution file will grow into a mess. The end result is a random mix of assemblies with different architectures.&lt;/p&gt;

&lt;p&gt;If someone builds the solution as &lt;code&gt;Release|Any&lt;/code&gt; CPU she might end up having a wild mix of &lt;em&gt;x86&lt;/em&gt;, &lt;em&gt;x64&lt;/em&gt; and other types of assemblies in the resulting binaries. The user&amp;rsquo;s intention of building a solution as &lt;strong&gt;Any&lt;/strong&gt; CPU is not &amp;ldquo;I don&amp;rsquo;t care what comes out on the other end&amp;rdquo;. It means &amp;ldquo;I want all assemblies to be compiled as &lt;code&gt;Any CPU&lt;/code&gt;, with all advantages and disadvantages&amp;rdquo;. A very big difference!&lt;/p&gt;

&lt;p&gt;It might not show right away when you have a &amp;ldquo;friendly&amp;rdquo; mix of compatible architectures and a little bit of luck, e.g. &lt;code&gt;AnyCPU&lt;/code&gt; and &lt;code&gt;x86&lt;/code&gt; running on a 32bit machine - intended or not, that might go unnoticed most of the time. But as soon as you start mixing incompatible assemblies, you app will go boom at run-time. But sudden death is not the worst thing that can happen; Depending on your code and dependencies, more subtle side-effects can creep in - posing a much bigger threat, since you then have production code running in an unpredictable state.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BadImageFormatException: An attempt was made to load a program with an incorrect format.
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;The Principle of Least Surprise&lt;/h1&gt;

&lt;p&gt;Have a look at your project&amp;rsquo;s solution file. You might discover that some active configurations are not consistent. In some rare special cases you might have good reasons to do things differently, but usually it is best to keep things simple: The solution settings should represent it&amp;rsquo;s projects&amp;rsquo; configurations as directly as possible. Compiling a solution with certain settings should be directly reflected in the generated binaries. I recently heard someone mention &amp;ldquo;the principle of least surprise&amp;rdquo;. That&amp;rsquo;s what this is about. Surprises are for birthday parties and Oprah. What we developers want is control.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Inconsistency in a solution:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;{74482536-2654-4B15-B457-9425A05341E6}.Debug|x86.ActiveCfg = Debug|x64 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Inconsistency in a project:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;PropertyGroup Condition=&amp;quot;&#39;$(Configuration)|$(Platform)&#39; == &#39;Debug|x86&#39;&amp;quot;&amp;gt;
  &amp;lt;PlatformTarget&amp;gt;x64&amp;lt;/PlatformTarget&amp;gt;
&amp;lt;/PropertyGroup&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to regain control of your solution build, you will have check the active configuration of every project for each possible combination of solution configuration and platform. Keep in mind that you might want to get rid of unused or unwanted options before doing so, reducing the reconfiguration work that has to be done. If you have many projects, this might take a few hours to get right. You need to make conscious decisions as to how you want which project to build. Knowledge of the project is therefor required and it might mean you have to discuss these decisions with your team.&lt;/p&gt;

&lt;p&gt;The following is my recommended strategy for straightening out your solution and project configurations. I want to emphasize that &lt;strong&gt;this is my personal preference&lt;/strong&gt; and that there may be good reasons to do it differently (e.g. when developing for funky platforms such as Windows Phone or Xbox). I believe this strategy is good for most (if not all) projects, being that it restores predictability and forces you to make decisions on how you want your project to be deployed. Here goes.&lt;/p&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;Regaining Control&lt;/h1&gt;

&lt;p&gt;Open the Configuration Manager. By switching &lt;code&gt;Configuration&lt;/code&gt; and &lt;code&gt;Platform&lt;/code&gt; you will be able to view and modify what project configurations/platforms will be targeted when building the solution in that mode. The general rule of thumb I recommend is to always keep solutions and project settings in sync. If the solution is set to &lt;code&gt;Debug|Any CPU&lt;/code&gt;, then all projects should be as well.&lt;/p&gt;

&lt;p&gt;When setting to a more specific platform such as &lt;code&gt;x86&lt;/code&gt;, you should switch as many projects&amp;rsquo; configurations as possible to that, too - otherwise to &lt;code&gt;Any CPU&lt;/code&gt;. In an ideal world you would set all projects to &lt;code&gt;x86&lt;/code&gt;, and if you can, do so. If you need to leave some &lt;code&gt;Any CPU&lt;/code&gt; projects in that mode (because you are probably just too lazy to do otherwise), at least make sure they are not your apps &amp;ldquo;entry points&amp;rdquo;, i.e. executable projects. The reason is if you build as &lt;code&gt;x86&lt;/code&gt; but your executable is &lt;code&gt;Any CPU&lt;/code&gt;, running the app on a 64bit machine will make your whole app domain run as x64, which is not always desirable and - much worse - not expected. So try to use the exact same config as in the solution whenever possible. Even if it means (some seconds of) extra work adding configurations to projects.&lt;/p&gt;

&lt;figure &gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;
        The *Configuration Manager* window
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
    &lt;p&gt;&lt;a href=&#34;/img/blogger/configmanager.jpeg&#34;&gt;
  &lt;img src=&#34;/img/blogger/configmanager.jpeg&#34;   width=&#34;400em&#34;  /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;/figure&gt;

&lt;div class=&#34;clearboth&#34;&gt;&lt;/div&gt;

&lt;p&gt;This topic is harder to explain than it should be, and much harder to describe than it actually is to do. Even if I am beating a dead horse here, I would like to describe the process using an example walk-through. My example app needs special treatment on 64bit platforms, meaning you have to run it explicitly as 32bit in order to support some third-party libraries that will die horribly if in x64 mode. The goal is to have an &lt;code&gt;Any CPU&lt;/code&gt; mode for any machine and an &lt;code&gt;x86&lt;/code&gt; mode in case you need to build an explicit 32bit app for a 64bit environment. Later on you could ditch the &lt;code&gt;x86&lt;/code&gt; mode if the incompatibility is out of the way. Note that if you don&amp;rsquo;t have issues running on 64bit machines, you can do the following while only keeping &lt;code&gt;Any CPU&lt;/code&gt; and can delete every other platform - making things much easier.&lt;/p&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Solution&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;In the Configuration Manager, remove any solution configuration other than &lt;code&gt;Debug&lt;/code&gt; and &lt;code&gt;Release&lt;/code&gt;. Also remove any solution platform other than &lt;code&gt;Any CPU&lt;/code&gt; and &lt;code&gt;x86&lt;/code&gt; (the latter only if you need a build that is never, ever supposed to run in a 64bit context).&lt;/li&gt;
&lt;li&gt;Select Debug and Any CPU in Visual Studio&amp;rsquo;s toolbar menus

&lt;ol&gt;
&lt;li&gt;Below, change &lt;em&gt;every&lt;/em&gt; project&amp;rsquo;s configuration to Debug&lt;/li&gt;
&lt;li&gt;Change &lt;em&gt;every&lt;/em&gt; project&amp;rsquo;s platform to &lt;code&gt;Any CPU&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check &lt;em&gt;every&lt;/em&gt; project&amp;rsquo;s &lt;em&gt;build&lt;/em&gt; check-box. That will ensure they recompile properly whenever you switch configurations. Otherwise, switching and then building could result in mixed-platform assemblies (= bad)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Release&lt;/code&gt; and &lt;code&gt;Any CPU&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;Below, change &lt;em&gt;every&lt;/em&gt; project&amp;rsquo;s configuration to &lt;code&gt;Release&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;same as 2.2&lt;/li&gt;
&lt;li&gt;same as 2.3&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;select &lt;code&gt;Debug&lt;/code&gt; and &lt;code&gt;x86&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;same as 2.1&lt;/li&gt;
&lt;li&gt;Change &lt;em&gt;every&lt;/em&gt; project&amp;rsquo;s target platform to &lt;code&gt;x86&lt;/code&gt;. If x86 is not an available platform for some projects, create them. At the very minimum, &lt;em&gt;every executable project must be x86&lt;/em&gt;; others usually can be &lt;code&gt;Any CPU&lt;/code&gt; if they really need to be, but for the sake of predictability, try to avoid that.&lt;/li&gt;
&lt;li&gt;same as 2.3&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Release&lt;/code&gt; and &lt;code&gt;x86&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;same as 2.1&lt;/li&gt;
&lt;li&gt;Change &lt;em&gt;every&lt;/em&gt; project&amp;rsquo;s platform to &lt;code&gt;x86&lt;/code&gt;. As explained in 4.2, try to avoid anything else, even &lt;code&gt;Any CPU&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;same as 2.3&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;&lt;em&gt;Every&lt;/em&gt; project&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open the project designer window (&amp;ldquo;project settings&amp;rdquo;) and go to the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/kb4wyys2.aspx&#34;&gt;build page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Remove any configurations and platforms that &lt;a href=&#34;http://www.xprogramming.com/Practices/PracNotNeed.html&#34;&gt;you do not need&lt;/a&gt; to avoid accidentally using the (now) deprecated settings in the future&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Debug&lt;/code&gt; and &lt;code&gt;Any CPU&lt;/code&gt; project settings at the top of the window

&lt;ol&gt;
&lt;li&gt;Set the &lt;em&gt;platform target&lt;/em&gt; in the middle of the window to be &lt;code&gt;Any CPU&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Debug&lt;/code&gt; and &lt;code&gt;x86&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;Set the platform target to &lt;code&gt;x86&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Release&lt;/code&gt; and &lt;code&gt;Any CPU&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;Set the platform target to &lt;code&gt;Any CPU&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Release&lt;/code&gt; and &lt;code&gt;x86&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;Set the platform target to &lt;code&gt;x86&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;hellip; I think you get the idea. Rinse and repeat for any other combination of solution configuration and platform. The general purpose is to take out some of the variables in the configuration chain and (pretend) it looks like what you would expect:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SLN config + SLN platform =&amp;gt; PROJ config + PROJ platform =&amp;gt; PROJ platform platform =&amp;gt; Binary
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_10&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Before I wrap this up you should know why I wrote this (probably too long) post in the first place. Recently I was running into those &lt;code&gt;BadImageFormatExceptions&lt;/code&gt; on a CI build server. It turned out that some of the projects compiled to x64, despite passing in explicit &lt;code&gt;Release|x86&lt;/code&gt; into the solution build. The CI servers are 32bit machines, and they crashed when a unit test attempted to load a 64bit assembly. Did I mention that I &lt;em&gt;really&lt;/em&gt; like unit tests?&lt;/p&gt;

&lt;p&gt;One nice effect of cleaning this up was that it reduced the solution&amp;rsquo;s file size enormously. From a whopping 4500 lines to less than 1500 lines - just by dumping unused configurations. I have not verified this yet, but I expect loading the solution and switching configurations to be (at least slightly) faster now. After all, VS loads that file into memory and works with it every time you switch.&lt;/p&gt;

&lt;p&gt;For what it&amp;rsquo;s worth, I think this is way too hard to control in Visual Studio. There is much flexibility here that is usually not required and only gets abused, consciously or not. The only thing a developer should have to worry about are the toolbar menus for solution configuration and platform. I find that the latter seems to disappear on some machines after a while. It would be wise to &lt;a href=&#34;http://blogs.msdn.com/b/nicgrave/archive/2010/06/19/platform-and-configuration-selection-in-visual-studio-2010-express-for-windows-phone.aspx&#34;&gt;re-activate&lt;/a&gt; it, so you are constantly aware of  which platform you have selected. That will help avoid producing absurd active configuration constellations in the solution. Another best practice would be: always diff on your solution and project files before submitting them to source control. Understand what has changed and make sure it does not conflict with the intended configurations for your project.&lt;/p&gt;

&lt;p&gt;I apologize if this post seemed repetitive at times. The terminology around these &amp;ldquo;configurations&amp;rdquo; and &amp;ldquo;platforms&amp;rdquo; is redundant and confusing, but once you got a grasp of these settings and the importance for your app (and your sanity!) you should have a much better understanding of how VS produces your application - and have much more control over the process.&lt;/p&gt;

&lt;h1 id=&#34;toc_11&#34;&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/kkz9kefa%28v=VS.100%29.aspx&#34;&gt;MSDN on solution and project configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms164311.aspx&#34;&gt;MSBuild command line reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/5dy88c2e.aspx&#34;&gt;Project file schema reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.msdn.com/b/nicgrave/archive/2010/06/19/platform-and-configuration-selection-in-visual-studio-2010-express-for-windows-phone.aspx&#34;&gt;How to: Enable the solution platform selector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/kwybya3w.aspx&#34;&gt;How to: Create and Edit Configurations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Testing serializability</title>
      <link>http://raph.es/blog/2011/02/Testing-serializability/</link>
      <pubDate>Mon, 21 Feb 2011 21:29:00 &#43;0100</pubDate>
      
      <guid>http://raph.es/blog/2011/02/Testing-serializability/</guid>
      <description>&lt;p&gt;Serialization in .NET is pretty straightforward. It is most commonly used to (de)serialize XML or to send byte streams over &lt;a href=&#34;http://www.urbandictionary.com/define.php?term=interwebs&#34;&gt;teh interwebs&lt;/a&gt;. The latter is an important part of how the &lt;a href=&#34;http://msdn.microsoft.com/en-us/netframework/aa663324&#34;&gt;Windows Communication Foundation (WCF)&lt;/a&gt; works - as well as it&amp;rsquo;s predecessor, .NET Remoting.&lt;/p&gt;

&lt;p&gt;In order to (de)serialize a type in .NET you have to decorate it with the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.serializableattribute.aspx&#34;&gt;SerializableAttribute&lt;/a&gt;. This will tell the runtime to take an object of a specific type and all of it&amp;rsquo;s data, flatten it into a series of bytes (hence the term &amp;ldquo;serialized&amp;rdquo;), which then can be written as text into an XML file or chopped into packets and sent over the wire.&lt;/p&gt;

&lt;p&gt;To do this, the runtime must know how to handle each and every member of the class. &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/s1ax56ch.aspx&#34;&gt;Value types&lt;/a&gt; such as int, double or enums as well as (special-case &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/490f96s2.aspx&#34;&gt;reference types&lt;/a&gt;) strings can be taken care of out-of-the-box since the size of their data is known to the runtime. In case of fields for custom classes, however, you need to do a little more work. Those are expected to be decorated with the SerializableAttribute as well. Means that as soon as you start serializing complex object graphs, every one of those complex types needs to be marked with said attribute.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Runtime.Serialization;

// must mark this serializable, even if it would implement ISerializable
[Serializable]
public class MySerializableClass
{
    private double someDouble;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is where stuff can get hairy. Say you have a main class that happens to be the &amp;ldquo;root&amp;rdquo; of that object graph. And someone on your team makes a modification to it, e.g. &lt;a href=&#34;http://www.refactoring.com/catalog/replaceDataValueWithObject.html&#34;&gt;refactors some of it into new classes&lt;/a&gt; that are added as fields. Then those new classes must have the SerializableAttribute, otherwise you will end up getting exceptions. At runtime. No line of defense at compile time! What a mess. I would have expected Visual Studio to offer some help here, or at least have a nice feature in ReSharper to make all affected types [Serializable] recursively.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Runtime.Serialization;

[Serializable]
public class MySerializableClass
{
    private double someDouble;

    // if not set to be ignored, will be expected to be serializable at runtime
    private ThatOtherSerializableClass complexObject;
}

// now this guy has to be marked serializable, too!
[Serializable]
public class ThatOtherSerializableClass
{
    private string SomeString { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At some point I got fed up with debugging cryptic exceptions in log files for hours just to find that someone made a change to that (way to complex) class and had forgotten to mark a new component serializable. In order to move the debugging closer to compile time I wrote a very simple test that is now executed for every change in the source control repository. Here it is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using NUnit.Framework;

[TestFixture]
public class MySerializableClassTest
{
    [Test]
    public void Serialize_BinaryDeserialize_ThrowsNoSerializationException()
    {
        var serializer  = new MySerializableClass();
        var stream = new MemoryStream();
        var formatter = new BinaryFormatter();

        try
        {
            Assert.DoesNotThrow(() =&amp;gt; formatter.Serialize(stream, serializer),
            &amp;quot;Class and all of it&#39;s components must be [Serializable]&amp;quot;);
        }
        finally
        {
            // close even if test fails
            stream.Close();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What it does should be quite obvious to those of you who actually looked through it. For those who just skimmed to the explanation (boo!), here goes. MySerializableClass is some type that is marked serializable and consists of other members that should be serializable. This is usually the root of your object graph that you will be serializing. It uses &lt;a href=&#34;http://www.nunit.org/index.php?p=exceptionAsserts&amp;amp;r=2.5.9&#34;&gt;NUnit&amp;rsquo;s Assert.DoesNotThrow assertion method&lt;/a&gt; to make sure the deserialization process does not cause any SerializationExceptions to be thrown.&lt;/p&gt;

&lt;p&gt;You might notice the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/zwc8s4fz%28v=vs.80%29.aspx&#34;&gt;try/finally block&lt;/a&gt; in there. Yes, I am aware of the fact that handling exceptions in tests is usually a &lt;a href=&#34;http://en.wikipedia.org/wiki/Code_smell&#34;&gt;bad smell&lt;/a&gt;. It usually indicates that you are catching exceptions, making it less readable, more complicated to comprehend (=maintain!) and could even falsify the test by catching one of NUnit&amp;rsquo;s exceptions. In this case I am just going the extra mile and ensuring that the MemoryStream used to serialize the object for this test into memory is closed, even if the test fails. In that case, NUnit will throw an exception and without the finally that stream would not be closed.&lt;/p&gt;

&lt;p&gt;You can probably omit the try/finally block and the call to Close(), since those resources will be cleaned up by the runtime sooner or later. That part does hurt readability alot. It is your call which one you prefer, I usually go for readability in tests. So, for the sake of completeness, here is a version without that try/finally - much better readable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using NUnit.Framework;

[TestFixture]
public class MySerializableClassTest
{
    [Test]
    public void Serialize_BinaryDeserialize_ThrowsNoSerializationException()
    {
         var serializer  = new MySerializableClass();
         var stream = new MemoryStream();
         var formatter = new BinaryFormatter();

         Assert.DoesNotThrow(() =&amp;gt; formatter.Serialize(stream, serializer),
         &amp;quot;Class and all of it&#39;s components must be [Serializable]&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it, simple test that can save lots of time. Now we know about that issue almost at compile time, if you run tests before you check-in code (and you should!), you will find this before any damage is done. At the very latest it should show up on your continuous integration server (assuming you have one; and you probably should!), which is still much better than at runtime.&lt;/p&gt;

&lt;p&gt;One more thing. I consider this test to be an integration test, not a unit test. It all runs in-memory, which could &lt;a href=&#34;http://www.osherove.com/blog/2009/9/28/unit-test-definition-20.html&#34;&gt;classify it as a unit test&lt;/a&gt; - but depending on the size and complexity of the serialized graph it can be a time consuming test (serveral seconds!) and involve many other classes (the members that should be marked serializable). Therefor, if you have a place (i.e. project) dedicated to integration tests, I recommend to put it in there.&lt;/p&gt;

&lt;p&gt;For details on how serialization works in .NET, check out the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.runtime.serialization.aspx&#34;&gt;ubiquitious MSDN documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(Update: It&amp;rsquo;s worth mentioning that this approach will only tell you if the class and it&amp;rsquo;s explicit member types are serializable. It will not, however, cover the fact that the references in the serialized class could hold derived types at run-time. Since the &lt;code&gt;SerializableAttribute&lt;/code&gt; is not inheritable, you could still end up with run-time exceptions when the actual types are not serializable.)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>