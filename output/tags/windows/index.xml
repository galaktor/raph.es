<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Windows on raph haXx </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://raph.es/tags/windows/index.xml/</link>
    
    
    <copyright>Raphael Estrada 2011-2014</copyright>
    <updated>Sun, 26 Feb 2012 21:16:00 &#43;0100</updated>
    
    <item>
      <title>Yet another attempt to level up my geek-iness</title>
      <link>http://raph.es/blog/2012/02/Yet-another-attempt-to-level-up-my-geek-iness/</link>
      <pubDate>Sun, 26 Feb 2012 21:16:00 &#43;0100</pubDate>
      
      <guid>http://raph.es/blog/2012/02/Yet-another-attempt-to-level-up-my-geek-iness/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been rather quiet over the past months and I&amp;rsquo;m sure the &lt;em&gt;entire&lt;/em&gt; blogosphere was shocked and wants to know why. Well, in addition to holidays and the likes, for the probably 4th time in the past 15 years I am attempting to move my computing life from Windows into Linux. And since I rarely have much time for my geeky side projects, I have been dedicating it to that rather than the blog.&lt;/p&gt;

&lt;p&gt;As just mentioned I tried this a few times before, but eventually failed. First time around I failed to even get my CD-ROM drive mounted in SuSe. Later on Ubuntu I lacked a few critical tools for my studies, like OneNote (which is brilliant) or VisualStudio for my thesis project. And Call of Duty.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;What&amp;rsquo;s different now?&lt;/h1&gt;

&lt;p&gt;I learned two things that I hope to get right this time.&lt;/p&gt;

&lt;p&gt;One is that I need to move most, if not &lt;em&gt;all&lt;/em&gt; my computing tasks into just one OS. Anything else will cause too much friction workflow-wise and I&amp;rsquo;ll eventually get stuck on Windows again.&lt;/p&gt;

&lt;p&gt;The other lesson was that Windows is simply best for two things I care somewhat about: .NET development and gaming. And since neither of these play well inside a VM I&amp;rsquo;ll need to dual-boot. The good thing (in this context) is that these two points have become less important to me over the last years. I do .NET in my day job, so I rarely feel the need to continue at home.&lt;/p&gt;

&lt;p&gt;And as much as it hurts to admit: I&amp;rsquo;ve outgrown my &lt;a href=&#34;http://www.techradar.com/news/gaming/consoles/11-signs-you-re-no-longer-a-hard-core-gamer-329291&#34;&gt;hardcore gamer phase&lt;/a&gt;. Gaming is now something I do on a work-less, shave-less, spongebob-boxer-shorts days. But I&amp;rsquo;m determined to finish all those games I bought during the last few X-mas sales on Steam! I suppose that puts me into some form of mid-life crisis? Scary, how gaming was close to the center of my life at a time when I couldn&amp;rsquo;t really afford the games I wanted. Now I have enough &amp;ldquo;allowance&amp;rdquo;, but barely any time left to play games. Oh, the irony.&lt;/p&gt;

&lt;p&gt;Anyhow, at the end of the day, I can now probably live with booting up Windows for these things as they are rather rare events.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Stick with Windows, idiot!&lt;/h1&gt;

&lt;p&gt;Why Linux at all then, you might ask? Well first of all I have been doing professional .NET development for over 7 years now (albeit not exclusively) and feel very comfortable in Windows, VS and the likes. But feeling too comfortable is a bad sign, it means not learning very much. So while .NET will stay a good way to do cool stuff and earn a nice living, I feel the nerdy (read: masochist) urge to leave the comfort zone and learn new things. You know, things that make me feel like a first-grader again. That make me yell curses at the screen. That make me feel like a god after I do get them working.&lt;/p&gt;

&lt;p&gt;Plus, and this is a big one: I think &lt;a href=&#34;http://www.fsf.org/&#34;&gt;Free Software&lt;/a&gt; is important. In a time where most of our daily life depends on computers that sit in virtually everybody&amp;rsquo;s pocket, I believe it&amp;rsquo;s important to have as much control over them as possible. Linux not only gives you very much that control, it&amp;rsquo;s also arguably the best operating system out there. Many distros nowadays work out-of-the-box with WiFi and all the gimmicks. So really I see no reason why I should have to force my life into a proprietary operating system while I can get a better, more flexible and &lt;em&gt;free&lt;/em&gt; one for&amp;hellip;well, free.&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;#!&lt;/h1&gt;

&lt;p&gt;So what I did was upgrade my good old &lt;a href=&#34;http://reviews.cnet.com/Dell_XPS_M1530/4505-3121_7-32778979.html&#34;&gt;M1530&lt;/a&gt;&amp;rsquo;s RAM, back up my files&amp;hellip;.and do other things so boring that just writing about them makes me narcoleptic. So pardon me if I skip to the good parts. I stuck roughly to &lt;a href=&#34;http://www.iceflatline.com/2011/05/install-and-configure-crunchbang-linux-on-the-lenovo-t410-laptop/&#34;&gt;this&lt;/a&gt; excellent tutorial, which served me as a guideline although I did deviate a bit.&lt;/p&gt;

&lt;p&gt;I installed Windows 7 as a primary OS using about 50% of the HDD, and then &lt;a href=&#34;http://crunchbanglinux.org/&#34;&gt;Crunchbang&lt;/a&gt; into dedicated partitions using the rest. Crunchbang is a minimalistic yet fully featured distro based on Debian Squeeze. I let the boot loader Grub2 install itself at the beginning of the disk. In CB I had to run the command &lt;code&gt;update-grub&lt;/code&gt; so that the OS-prober could auto-detect Windows, then that was sorted.&lt;/p&gt;

&lt;p&gt;While I&amp;rsquo;m moving into the brave new world of WTF&amp;rsquo;ing on Linux I will post about things I have learned along the way. One is the ability to use several window managers and select them at the login screen. The default on CB is &lt;a href=&#34;http://openbox.org/&#34;&gt;Openbox&lt;/a&gt;, and it&amp;rsquo;s great, but I&amp;rsquo;d like a mouse-less window manager for coding. Thus coming soon are my notes on how to get Openbox and &lt;a href=&#34;http://www.nongnu.org/ratpoison/&#34;&gt;Ratpoison&lt;/a&gt; to co-exist. (This is also a prime example of why proprietary software can lock you down - there&amp;rsquo;s no nice way to change your window management on Windows. On Linux, if it doesn&amp;rsquo;t exist, you can always roll your own.)&lt;/p&gt;

&lt;p&gt;And yes, there will still be Windows/.NET related posts in the future - we&amp;rsquo;ll have to wait and see how &lt;em&gt;this&lt;/em&gt; attempt at Linux will work out for me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Revisited: Mapping network drives for TeamCity build agents</title>
      <link>http://raph.es/blog/2011/12/Revisited-Mapping-network-drives-for-TeamCity-build-agents/</link>
      <pubDate>Mon, 19 Dec 2011 06:58:00 &#43;0100</pubDate>
      
      <guid>http://raph.es/blog/2011/12/Revisited-Mapping-network-drives-for-TeamCity-build-agents/</guid>
      <description>

&lt;p&gt;In an older &lt;a href=&#34;/2011/06/mapping-network-drives-for-teamcity.html&#34;&gt;post&lt;/a&gt; I mentioned how hard it is to have TeamCity agents have access to mapped drives. Unfortunately, Windows only maps network drives during a user&amp;rsquo;s login process. But you do not want to log in for every build agent - ideally they will run as daemons and, for instance, start automatically when the system boots without a user having to get involved.&lt;/p&gt;

&lt;p&gt;So what I did before was an ugly hack - I used &lt;a href=&#34;http://technet.microsoft.com/en-us/sysinternals/bb897553&#34;&gt;psexec&lt;/a&gt; to map the drives I want agents to see to the root user (&amp;ldquo;SYSTEM&amp;rdquo;). I never really understood why it worked, but I never liked the solution. Plus, it still did not give you a real Windows service, only a scheduled task that sort of behaved the same way.&lt;/p&gt;

&lt;p&gt;I recently did some reworking of my agents and decided to get rid of the psexec hack. What I did this time is much simpler: I gave up. Yep, I gave up trying to map the drives for the agents. If I want agents to be services, and services cannot map drives, so be it.&lt;/p&gt;

&lt;figure &gt;
    
    &lt;p&gt;&lt;a href=&#34;/img/blogger/troll-mappings.jpeg&#34;&gt;
  &lt;img src=&#34;/img/blogger/troll-mappings.jpeg&#34;   width=&#34;400em&#34;  /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;/figure&gt;

&lt;div class=&#34;clearboth&#34;&gt;&lt;/div&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Work with it, not against it&lt;/h1&gt;

&lt;p&gt;The alternative is to not need drive mappings in the first place. It crossed my mind that I might want to force all reference paths in the VS projects to be UNC paths. Problem is when you add a new file or reference, VS defaults to the drive letter and not the UNC path. Builds would regularly break because somebody forgot to manually change it into a UNC path&amp;hellip;not cool.&lt;/p&gt;

&lt;p&gt;The simple way around this is have a build step run before each VS compile that &amp;ldquo;unmaps&amp;rdquo; the project files automagically. Devs can still use drive mappings which work for them and don&amp;rsquo;t have to worry about these build server specifics.&lt;/p&gt;

&lt;p&gt;At the end of this post is a simple Powershell script that does the job. It&amp;rsquo;s quite simple in that it does a find/replace using regular expressions. Turns out this works quite nicely and performs well, too - just a few seconds to process several hundreds of project files. Adding in target file types or drive mappings should be straight-forward. Feel free to use, but &lt;em&gt;please read and respect the &lt;a href=&#34;/license&#34;&gt;license&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Running it as a pre-build step&lt;/h1&gt;

&lt;p&gt;On TeamCity 6+ you can configure an arbitrary chain of build steps. Just have TeamCity run this script on before your projects are compiled. Simplest is to just pass in the builds working directory as a paramter (&lt;code&gt;%system.teamcity.build.workingDir%&lt;/code&gt;). That way you can replace the drive mappings in all files that were checked out of source control for the running build. You can, of course, use more specific paths instead of this shotgun approach. If that&amp;rsquo;s how you roll.&lt;/p&gt;

&lt;p&gt;Keep in mind that your build machines will by default have a &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347628.aspx&#34;&gt;PowerShell execution policy&lt;/a&gt; of &lt;code&gt;Restricted&lt;/code&gt;. You&amp;rsquo;ll have to change it to run the scripts. &lt;code&gt;Set-ExecutionPolicy RemoteSigned&lt;/code&gt; will do. If you TC process runs with administrator privileges you can also pass in a parameter to powershell.exe that will bypass the execution policy (use at your own risk):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;powershell.exe .\myscript.ps1 &amp;lt;path&amp;gt; -executionPolicy Bypass. 
&lt;/code&gt;&lt;/pre&gt;

&lt;figure &gt;
    
    &lt;p&gt;&lt;a href=&#34;/img/blogger/tc-unmap-drives-step-highlight.jpeg&#34;&gt;
  &lt;img src=&#34;/img/blogger/tc-unmap-drives-step-highlight.jpeg&#34;   width=&#34;350em&#34;  /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;/figure&gt;

&lt;div class=&#34;clearboth&#34;&gt;&lt;/div&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Example script (PowerShell)&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;# licensed under The MIT license: http://www.opensource.org/licenses/mit-license.php
# Copyright (c) Raphael Estrada
# Author URL: http://www.galaktor.net
PARAM([parameter(Mandatory = $true)]
      [string]$root=$(throw &amp;quot;Must give a root path.&amp;quot;))

$exitCode = 0

try
{
  $stopWatch = New-Object &amp;quot;System.Diagnostics.Stopwatch&amp;quot;
  $stopWatch.Start()
  # works on C# an VC++ project files
  $targetFiles = Get-ChildItem $root -recurse -include @(&amp;quot;*.csproj&amp;quot;,&amp;quot;*.vcxproj&amp;quot;)
  $stopWatch.Stop()

  Write-Host &amp;quot;Finding&amp;quot; $targetFiles.Length &amp;quot;files took&amp;quot; $stopWatch.ElapsedMilliseconds &amp;quot;ms&amp;quot;

  $mappings = @(
          (&#39;X&#39;, &#39;\\path\to\x&#39;),
          (&#39;Y&#39;, &#39;\\path\to\y&#39;),
          (&#39;Z&#39;, &#39;\\path\to\z&#39;)
        )

  $stopWatch.Reset()
  $stopWatch.Start()
  $modifiedCounter = 0
  foreach($file in $targetFiles)
  {
    # project file XML is usually UTF8
    $content = (Get-Content $file -Encoding UTF8)

    foreach($mapping in $mappings)
    {
      $pathRegex = [System.String]::Format(&amp;quot;{0}:\\&amp;quot;, $mapping[0])
      $replacement = $mapping[1]
      if(!$replacement.EndsWith(&amp;quot;\&amp;quot;))
      {
        $replacement += &amp;quot;\&amp;quot;
      }
      if($content -match $pathRegex)
      {
        Write-Host &amp;quot;Found references to&amp;quot; $mapping[0] &amp;quot;drive in&amp;quot; $file.FullName &amp;quot;- Replacing with&amp;quot; $mapping[1]
        $content = $content -replace $pathRegex, $replacement
        $modifiedCounter++
      }
    }

    # write result back to file; again UTF8
    Set-Content -Encoding UTF8 $file $content -Force
  }
  $stopWatch.Stop()

  Write-Host &amp;quot;Processing&amp;quot; $targetFiles.Length &amp;quot;files took&amp;quot; $stopWatch.ElapsedMilliseconds &amp;quot;ms&amp;quot;
  Write-Host &amp;quot;Files modified:&amp;quot; $modifiedCounter
}
catch [System.Exception]
{
  Write-Host &amp;quot;ERROR!&amp;quot; $_ -ForegroundColor Red
  $exitCode = 1
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Mapping network drives for TeamCity build agents</title>
      <link>http://raph.es/blog/2011/06/Mapping-network-drives-for-TeamCity-build-agents/</link>
      <pubDate>Sun, 12 Jun 2011 20:18:00 IST</pubDate>
      
      <guid>http://raph.es/blog/2011/06/Mapping-network-drives-for-TeamCity-build-agents/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: I recently changed my solution to the below problem. Go &lt;a href=&#34;/2011/12/revisited-mapping-network-drives-for.html&#34;&gt;check out&lt;/a&gt; my new, revolutionary approach to drive mappings on TeamCity agents!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jetbrains.com/teamcity/ is a sophisticated and, above all, easy-to-use [CI server](http://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;TeamCity&lt;/a&gt;. It works equally well on different platforms, and despite it being implemented in Java, has surprisingly good support for Windows and .NET development.&lt;/p&gt;

&lt;p&gt;When you install TeamCity, aside from the central (web) server, you will be running at least one build agent. On Windows, it is very convenient to install agents as &lt;a href=&#34;http://en.wikipedia.org/wiki/Windows_service&#34;&gt;NT services&lt;/a&gt;. That way they can run &lt;a href=&#34;http://en.wikipedia.org/wiki/Daemon_%28computer_software%29&#34;&gt;daemon-like&lt;/a&gt; in the background, unattended, and without having to log on as an actual user of the build machine. Especially when your machines can be restarted frequently (e.g. for updates), it comes in handy that the service will simply start up again after the reboot.&lt;/p&gt;

&lt;p&gt;There is one annoying fact about Windows services, though: they will not see &lt;a href=&#34;http://en.wikipedia.org/wiki/Network_share&#34;&gt;network drive mappings&lt;/a&gt;. If your code base happens to have references to shared libraries on the network, and you use mapped drive letters to point your code to those (as opposed to, say, UNC paths), your builds will fail when running the build agent as a service. It will not see mapped drives, and therefor not find your dependencies.&lt;/p&gt;

&lt;p&gt;I am no hardcore Windows administrator, but it appears that the network drive mapping is bound to a user and to his security context. That allows windows to decide, for example, if the mapped drive can be accessed by whatever user is currently logged on. No user, no security context, no mapped drives. What is particularly weird is that this still happens when you tell Windows to run the service as a particular user (instead of the default SYSTEM user).&lt;/p&gt;

&lt;p&gt;Anyhoo, feel free to google the hell out of this topic and please leave a comment if you find a way to legally tell a service to map some drives. Until then, I have come up with a similar approach that will give you the benefits of a service without actually using it. It is hacky, I admit that much, and I do not understand every geeky detail of why it works while the service can&amp;rsquo;t see the network drives&amp;hellip;but I feel I should dump my hack here in case anyone finds himself in a similar situation and just wants it to &lt;em&gt;work&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Mapping drives to the root&lt;/h1&gt;

&lt;p&gt;I have done the following on Windows Server 2008 R2 machines - it goes without saying (but I&amp;rsquo;ll still say it) that these steps might differ or not work at all on other versions of Windows. Again, if you know a better way, I&amp;rsquo;m all ears.&lt;/p&gt;

&lt;p&gt;First of all, we need a script that contains the commands to map the drives you need during your builds. As an example, I will assume you want a drive X: to point to a location on your network, \someserver\some\directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;REM content of &amp;quot;map_network_drives.cmd&amp;quot;

REM delete existing mapping first
net use x: /delete

REM map drive; &amp;quot;persistent&amp;quot; just in case
net use x: \\someserver\some\directory /persistent:yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, using the almighty &lt;a href=&#34;http://technet.microsoft.com/en-us/sysinternals/bb897553&#34;&gt;PsExec&lt;/a&gt;, part of the &lt;a href=&#34;http://technet.microsoft.com/en-us/sysinternals/bb842062&#34;&gt;Sysinternals Suite&lt;/a&gt;, we create another script that will call our previous network map script with as the &amp;ldquo;root&amp;rdquo; user of your windows machine, the SYSTEM account. Note that screwing around with the root account can be a dangerous thing to do - don&amp;rsquo;t say I did not warn you.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;REM content of &amp;quot;system_map_network_drives.cmd&amp;quot;

REM configure locations to dependencies 
set psexecPath=C:\tools\PsTools\PsExec.exe
set mapNetworkDrives=C:\tools\map_network_drives.cmd 

REM map network drives to SYSTEM user 
%psexecPath% -s %mapNetworkDrives%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, in order to imitate a service&amp;rsquo;s behavior, we need a scheduled task that will execute our &lt;code&gt;system_map_network_drives.cmd&lt;/code&gt; script on &lt;em&gt;system startup&lt;/em&gt;. Make sure the task is setup to run as an administrator. For details on how to schedule a task in windows, check out this &lt;a href=&#34;http://en.lmgtfy.com/?q=scheduled+task+windows&#34;&gt;radical new website that will answer virtually all of your questions&lt;/a&gt;. For each of your TeamCity agents, set up a task the same way at system start-up that will execute &lt;code&gt;agent.bat start&lt;/code&gt; (located in your build agent&amp;rsquo;s &lt;code&gt;bin&lt;/code&gt; directory).&lt;/p&gt;

&lt;p&gt;What will happen now is whenever your machine boots up, your agents will start up, and in parallel, your SYSTEM account will have the expected drive mappings. When your agents start building, they will be able to resolve the mapped drive paths in your code at compile time.&lt;/p&gt;

&lt;p&gt;Now you might be wondering why I don&amp;rsquo;t just do the same and start the agents as services instead of tasks. That did not work - for &lt;em&gt;me&lt;/em&gt; at least. Although tasks seem to have the same limitations regarding drive mappings as the services do, for some reason, giving the SYSTEM user those drive mappings works for the tasks, but not the services. As I said, I&amp;rsquo;m no Windows guru, and to be honest I was just plain happy this worked eventually.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Verifying the mapped drives&lt;/h1&gt;

&lt;p&gt;When you call PsExec for the first time, you will need an elevated command prompt so it can install the PsExec service. And you&amp;rsquo;ll need to accept the terms and conditions at first run as well. You can verify this by using PsExec to get a console and checking if the drives are mapped, as shown below. Before running the above tasks, the call to &lt;code&gt;net use&lt;/code&gt; will inform you that &lt;code&gt;&amp;quot;There are no entries in the list.&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\tools\PsTools&amp;gt;PsExec.exe -s cmd.exe
PsExec v1.98 - Execute processes remotely
Copyright (C) 2001-2010 Mark Russinovich
Sysinternals - www.sysinternals.com


Microsoft Windows [Version 6.1.7600]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\Windows\system32&amp;gt;whoami
nt authority\system

C:\Windows\system32&amp;gt;net use
New connections will be remembered.

Status       Local     Remote                       Network

----------------------------------------------------------------------------------
OK           X:        \\someserver\some\directory  Microsoft Windows Network
The command completed successfully.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s worth mentioning that this approach might cause problems when the mapped network location requires specific permissions - adding the &amp;ldquo;SYSTEM&amp;rdquo; for every build machine to permission lists is not very scalable, especially when you have lots of build boxes in a farm.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>